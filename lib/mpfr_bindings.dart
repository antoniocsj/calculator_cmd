// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as ffi;

/// FFI bindings for the MPFR library
class MPFRNativeLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MPFRNativeLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MPFRNativeLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __gmp_set_memory_functions(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
        arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                    ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>
        arg1,
    ffi.Pointer<
            ffi
            .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
        arg2,
  ) {
    return ___gmp_set_memory_functions(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmp_set_memory_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>,
                          ffi.Size)>>)>>('__gmp_set_memory_functions');
  late final ___gmp_set_memory_functions =
      ___gmp_set_memory_functionsPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>)>();

  void __gmp_get_memory_functions(
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>>
        arg0,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(
                        ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>>
        arg1,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>>
        arg2,
  ) {
    return ___gmp_get_memory_functions(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmp_get_memory_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(ffi.Size)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>,
                              ffi.Size)>>>)>>('__gmp_get_memory_functions');
  late final ___gmp_get_memory_functions =
      ___gmp_get_memory_functionsPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(ffi.Size)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Size)>>>)>();

  late final ffi.Pointer<ffi.Int> ___gmp_bits_per_limb =
      _lookup<ffi.Int>('__gmp_bits_per_limb');

  int get __gmp_bits_per_limb => ___gmp_bits_per_limb.value;

  late final ffi.Pointer<ffi.Int> ___gmp_errno =
      _lookup<ffi.Int>('__gmp_errno');

  int get __gmp_errno => ___gmp_errno.value;

  set __gmp_errno(int value) => ___gmp_errno.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Utf8>> ___gmp_version =
      _lookup<ffi.Pointer<ffi.Utf8>>('__gmp_version');

  ffi.Pointer<ffi.Utf8> get __gmp_version => ___gmp_version.value;

  void __gmp_randinit(
    gmp_randstate_ptr arg0,
    gmp_randalg_t arg1,
  ) {
    return ___gmp_randinit(
      arg0,
      arg1.value,
    );
  }

  late final ___gmp_randinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gmp_randstate_ptr, ffi.UnsignedInt)>>('__gmp_randinit');
  late final ___gmp_randinit =
      ___gmp_randinitPtr.asFunction<void Function(gmp_randstate_ptr, int)>();

  void __gmp_randinit_default(
    gmp_randstate_ptr arg0,
  ) {
    return ___gmp_randinit_default(
      arg0,
    );
  }

  late final ___gmp_randinit_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gmp_randstate_ptr)>>(
          '__gmp_randinit_default');
  late final ___gmp_randinit_default =
      ___gmp_randinit_defaultPtr.asFunction<void Function(gmp_randstate_ptr)>();

  void __gmp_randinit_lc_2exp(
    gmp_randstate_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmp_randinit_lc_2exp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmp_randinit_lc_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gmp_randstate_ptr, mpz_srcptr, ffi.UnsignedLong,
              mp_bitcnt_t)>>('__gmp_randinit_lc_2exp');
  late final ___gmp_randinit_lc_2exp = ___gmp_randinit_lc_2expPtr
      .asFunction<void Function(gmp_randstate_ptr, mpz_srcptr, int, int)>();

  int __gmp_randinit_lc_2exp_size(
    gmp_randstate_ptr arg0,
    int arg1,
  ) {
    return ___gmp_randinit_lc_2exp_size(
      arg0,
      arg1,
    );
  }

  late final ___gmp_randinit_lc_2exp_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(gmp_randstate_ptr, mp_bitcnt_t)>>(
      '__gmp_randinit_lc_2exp_size');
  late final ___gmp_randinit_lc_2exp_size = ___gmp_randinit_lc_2exp_sizePtr
      .asFunction<int Function(gmp_randstate_ptr, int)>();

  void __gmp_randinit_mt(
    gmp_randstate_ptr arg0,
  ) {
    return ___gmp_randinit_mt(
      arg0,
    );
  }

  late final ___gmp_randinit_mtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gmp_randstate_ptr)>>(
          '__gmp_randinit_mt');
  late final ___gmp_randinit_mt =
      ___gmp_randinit_mtPtr.asFunction<void Function(gmp_randstate_ptr)>();

  void __gmp_randinit_set(
    gmp_randstate_ptr arg0,
    gmp_randstate_srcptr arg1,
  ) {
    return ___gmp_randinit_set(
      arg0,
      arg1,
    );
  }

  late final ___gmp_randinit_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gmp_randstate_ptr, gmp_randstate_srcptr)>>('__gmp_randinit_set');
  late final ___gmp_randinit_set = ___gmp_randinit_setPtr
      .asFunction<void Function(gmp_randstate_ptr, gmp_randstate_srcptr)>();

  void __gmp_randseed(
    gmp_randstate_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmp_randseed(
      arg0,
      arg1,
    );
  }

  late final ___gmp_randseedPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gmp_randstate_ptr, mpz_srcptr)>>(
      '__gmp_randseed');
  late final ___gmp_randseed = ___gmp_randseedPtr
      .asFunction<void Function(gmp_randstate_ptr, mpz_srcptr)>();

  void __gmp_randseed_ui(
    gmp_randstate_ptr arg0,
    int arg1,
  ) {
    return ___gmp_randseed_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmp_randseed_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gmp_randstate_ptr, ffi.UnsignedLong)>>('__gmp_randseed_ui');
  late final ___gmp_randseed_ui =
      ___gmp_randseed_uiPtr.asFunction<void Function(gmp_randstate_ptr, int)>();

  void __gmp_randclear(
    gmp_randstate_ptr arg0,
  ) {
    return ___gmp_randclear(
      arg0,
    );
  }

  late final ___gmp_randclearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gmp_randstate_ptr)>>(
          '__gmp_randclear');
  late final ___gmp_randclear =
      ___gmp_randclearPtr.asFunction<void Function(gmp_randstate_ptr)>();

  int __gmp_urandomb_ui(
    gmp_randstate_ptr arg0,
    int arg1,
  ) {
    return ___gmp_urandomb_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmp_urandomb_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              gmp_randstate_ptr, ffi.UnsignedLong)>>('__gmp_urandomb_ui');
  late final ___gmp_urandomb_ui =
      ___gmp_urandomb_uiPtr.asFunction<int Function(gmp_randstate_ptr, int)>();

  int __gmp_urandomm_ui(
    gmp_randstate_ptr arg0,
    int arg1,
  ) {
    return ___gmp_urandomm_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmp_urandomm_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              gmp_randstate_ptr, ffi.UnsignedLong)>>('__gmp_urandomm_ui');
  late final ___gmp_urandomm_ui =
      ___gmp_urandomm_uiPtr.asFunction<int Function(gmp_randstate_ptr, int)>();

  int __gmp_asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Utf8>> arg0,
    ffi.Pointer<ffi.Utf8> arg1,
  ) {
    return ___gmp_asprintf(
      arg0,
      arg1,
    );
  }

  late final ___gmp_asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Utf8>>,
              ffi.Pointer<ffi.Utf8>)>>('__gmp_asprintf');
  late final ___gmp_asprintf = ___gmp_asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Utf8>>, ffi.Pointer<ffi.Utf8>)>();

  int __gmp_printf(
    ffi.Pointer<ffi.Utf8> arg0,
  ) {
    return ___gmp_printf(
      arg0,
    );
  }

  late final ___gmp_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Utf8>)>>(
          '__gmp_printf');
  late final ___gmp_printf =
      ___gmp_printfPtr.asFunction<int Function(ffi.Pointer<ffi.Utf8>)>();

  int __gmp_snprintf(
    ffi.Pointer<ffi.Utf8> arg0,
    int arg1,
    ffi.Pointer<ffi.Utf8> arg2,
  ) {
    return ___gmp_snprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmp_snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Utf8>, ffi.Size,
              ffi.Pointer<ffi.Utf8>)>>('__gmp_snprintf');
  late final ___gmp_snprintf = ___gmp_snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Utf8>, int, ffi.Pointer<ffi.Utf8>)>();

  int __gmp_sprintf(
    ffi.Pointer<ffi.Utf8> arg0,
    ffi.Pointer<ffi.Utf8> arg1,
  ) {
    return ___gmp_sprintf(
      arg0,
      arg1,
    );
  }

  late final ___gmp_sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Utf8>, ffi.Pointer<ffi.Utf8>)>>('__gmp_sprintf');
  late final ___gmp_sprintf = ___gmp_sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Utf8>, ffi.Pointer<ffi.Utf8>)>();

  int __gmp_scanf(
    ffi.Pointer<ffi.Utf8> arg0,
  ) {
    return ___gmp_scanf(
      arg0,
    );
  }

  late final ___gmp_scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Utf8>)>>(
          '__gmp_scanf');
  late final ___gmp_scanf =
      ___gmp_scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Utf8>)>();

  int __gmp_sscanf(
    ffi.Pointer<ffi.Utf8> arg0,
    ffi.Pointer<ffi.Utf8> arg1,
  ) {
    return ___gmp_sscanf(
      arg0,
      arg1,
    );
  }

  late final ___gmp_sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Utf8>, ffi.Pointer<ffi.Utf8>)>>('__gmp_sscanf');
  late final ___gmp_sscanf = ___gmp_sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Utf8>, ffi.Pointer<ffi.Utf8>)>();

  ffi.Pointer<ffi.Void> __gmpz_realloc(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_realloc(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_reallocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(mpz_ptr, mp_size_t)>>(
      '__gmpz_realloc');
  late final ___gmpz_realloc = ___gmpz_reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(mpz_ptr, int)>();

  void __gmpz_abs(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_abs(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_absPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_abs');
  late final ___gmpz_abs =
      ___gmpz_absPtr.asFunction<void Function(mpz_ptr, mpz_srcptr)>();

  void __gmpz_add(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_add');
  late final ___gmpz_add = ___gmpz_addPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_add_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_add_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_add_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_add_ui');
  late final ___gmpz_add_ui =
      ___gmpz_add_uiPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_addmul(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_addmul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_addmulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_addmul');
  late final ___gmpz_addmul = ___gmpz_addmulPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_addmul_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_addmul_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_addmul_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_addmul_ui');
  late final ___gmpz_addmul_ui = ___gmpz_addmul_uiPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_and(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_and(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_andPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_and');
  late final ___gmpz_and = ___gmpz_andPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_array_init(
    mpz_ptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpz_array_init(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_array_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_size_t, mp_size_t)>>(
      '__gmpz_array_init');
  late final ___gmpz_array_init =
      ___gmpz_array_initPtr.asFunction<void Function(mpz_ptr, int, int)>();

  void __gmpz_bin_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_bin_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_bin_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_bin_ui');
  late final ___gmpz_bin_ui =
      ___gmpz_bin_uiPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_bin_uiui(
    mpz_ptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpz_bin_uiui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_bin_uiuiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, ffi.UnsignedLong, ffi.UnsignedLong)>>('__gmpz_bin_uiui');
  late final ___gmpz_bin_uiui =
      ___gmpz_bin_uiuiPtr.asFunction<void Function(mpz_ptr, int, int)>();

  void __gmpz_cdiv_q(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_cdiv_q(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_cdiv_qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_cdiv_q');
  late final ___gmpz_cdiv_q = ___gmpz_cdiv_qPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_cdiv_q_2exp(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_cdiv_q_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_cdiv_q_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_cdiv_q_2exp');
  late final ___gmpz_cdiv_q_2exp = ___gmpz_cdiv_q_2expPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_cdiv_q_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_cdiv_q_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_cdiv_q_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_cdiv_q_ui');
  late final ___gmpz_cdiv_q_ui =
      ___gmpz_cdiv_q_uiPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_cdiv_qr(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
    mpz_srcptr arg3,
  ) {
    return ___gmpz_cdiv_qr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_cdiv_qrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_cdiv_qr');
  late final ___gmpz_cdiv_qr = ___gmpz_cdiv_qrPtr
      .asFunction<void Function(mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  int __gmpz_cdiv_qr_ui(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
    int arg3,
  ) {
    return ___gmpz_cdiv_qr_ui(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_cdiv_qr_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(mpz_ptr, mpz_ptr, mpz_srcptr,
              ffi.UnsignedLong)>>('__gmpz_cdiv_qr_ui');
  late final ___gmpz_cdiv_qr_ui = ___gmpz_cdiv_qr_uiPtr
      .asFunction<int Function(mpz_ptr, mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_cdiv_r(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_cdiv_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_cdiv_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_cdiv_r');
  late final ___gmpz_cdiv_r = ___gmpz_cdiv_rPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_cdiv_r_2exp(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_cdiv_r_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_cdiv_r_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_cdiv_r_2exp');
  late final ___gmpz_cdiv_r_2exp = ___gmpz_cdiv_r_2expPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_cdiv_r_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_cdiv_r_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_cdiv_r_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_cdiv_r_ui');
  late final ___gmpz_cdiv_r_ui =
      ___gmpz_cdiv_r_uiPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_cdiv_ui(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_cdiv_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cdiv_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_cdiv_ui');
  late final ___gmpz_cdiv_ui =
      ___gmpz_cdiv_uiPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_clear(
    mpz_ptr arg0,
  ) {
    return ___gmpz_clear(
      arg0,
    );
  }

  late final ___gmpz_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr)>>('__gmpz_clear');
  late final ___gmpz_clear =
      ___gmpz_clearPtr.asFunction<void Function(mpz_ptr)>();

  void __gmpz_clears(
    mpz_ptr arg0,
  ) {
    return ___gmpz_clears(
      arg0,
    );
  }

  late final ___gmpz_clearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr)>>('__gmpz_clears');
  late final ___gmpz_clears =
      ___gmpz_clearsPtr.asFunction<void Function(mpz_ptr)>();

  void __gmpz_clrbit(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_clrbit(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_clrbitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_bitcnt_t)>>(
          '__gmpz_clrbit');
  late final ___gmpz_clrbit =
      ___gmpz_clrbitPtr.asFunction<void Function(mpz_ptr, int)>();

  int __gmpz_cmp(
    mpz_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_cmp(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, mpz_srcptr)>>(
          '__gmpz_cmp');
  late final ___gmpz_cmp =
      ___gmpz_cmpPtr.asFunction<int Function(mpz_srcptr, mpz_srcptr)>();

  int __gmpz_cmp_d(
    mpz_srcptr arg0,
    double arg1,
  ) {
    return ___gmpz_cmp_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cmp_dPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.Double)>>(
          '__gmpz_cmp_d');
  late final ___gmpz_cmp_d =
      ___gmpz_cmp_dPtr.asFunction<int Function(mpz_srcptr, double)>();

  int __gmpz_cmp_si(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_cmp_si(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cmp_siPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.Long)>>(
          '__gmpz_cmp_si');
  late final ___gmpz_cmp_si =
      ___gmpz_cmp_siPtr.asFunction<int Function(mpz_srcptr, int)>();

  int __gmpz_cmp_ui(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_cmp_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cmp_uiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.UnsignedLong)>>(
      '__gmpz_cmp_ui');
  late final ___gmpz_cmp_ui =
      ___gmpz_cmp_uiPtr.asFunction<int Function(mpz_srcptr, int)>();

  int __gmpz_cmpabs(
    mpz_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_cmpabs(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cmpabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, mpz_srcptr)>>(
          '__gmpz_cmpabs');
  late final ___gmpz_cmpabs =
      ___gmpz_cmpabsPtr.asFunction<int Function(mpz_srcptr, mpz_srcptr)>();

  int __gmpz_cmpabs_d(
    mpz_srcptr arg0,
    double arg1,
  ) {
    return ___gmpz_cmpabs_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cmpabs_dPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.Double)>>(
          '__gmpz_cmpabs_d');
  late final ___gmpz_cmpabs_d =
      ___gmpz_cmpabs_dPtr.asFunction<int Function(mpz_srcptr, double)>();

  int __gmpz_cmpabs_ui(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_cmpabs_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_cmpabs_uiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.UnsignedLong)>>(
      '__gmpz_cmpabs_ui');
  late final ___gmpz_cmpabs_ui =
      ___gmpz_cmpabs_uiPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_com(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_com(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_comPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_com');
  late final ___gmpz_com =
      ___gmpz_comPtr.asFunction<void Function(mpz_ptr, mpz_srcptr)>();

  void __gmpz_combit(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_combit(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_combitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_bitcnt_t)>>(
          '__gmpz_combit');
  late final ___gmpz_combit =
      ___gmpz_combitPtr.asFunction<void Function(mpz_ptr, int)>();

  int __gmpz_congruent_p(
    mpz_srcptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_congruent_p(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_congruent_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpz_srcptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_congruent_p');
  late final ___gmpz_congruent_p = ___gmpz_congruent_pPtr
      .asFunction<int Function(mpz_srcptr, mpz_srcptr, mpz_srcptr)>();

  int __gmpz_congruent_2exp_p(
    mpz_srcptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_congruent_2exp_p(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_congruent_2exp_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpz_srcptr, mpz_srcptr, mp_bitcnt_t)>>('__gmpz_congruent_2exp_p');
  late final ___gmpz_congruent_2exp_p = ___gmpz_congruent_2exp_pPtr
      .asFunction<int Function(mpz_srcptr, mpz_srcptr, int)>();

  int __gmpz_congruent_ui_p(
    mpz_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpz_congruent_ui_p(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_congruent_ui_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpz_srcptr, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('__gmpz_congruent_ui_p');
  late final ___gmpz_congruent_ui_p = ___gmpz_congruent_ui_pPtr
      .asFunction<int Function(mpz_srcptr, int, int)>();

  void __gmpz_divexact(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_divexact(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_divexactPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>(
      '__gmpz_divexact');
  late final ___gmpz_divexact = ___gmpz_divexactPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_divexact_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_divexact_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_divexact_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_divexact_ui');
  late final ___gmpz_divexact_ui = ___gmpz_divexact_uiPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_divisible_p(
    mpz_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_divisible_p(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_divisible_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, mpz_srcptr)>>(
          '__gmpz_divisible_p');
  late final ___gmpz_divisible_p =
      ___gmpz_divisible_pPtr.asFunction<int Function(mpz_srcptr, mpz_srcptr)>();

  int __gmpz_divisible_ui_p(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_divisible_ui_p(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_divisible_ui_pPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.UnsignedLong)>>(
      '__gmpz_divisible_ui_p');
  late final ___gmpz_divisible_ui_p =
      ___gmpz_divisible_ui_pPtr.asFunction<int Function(mpz_srcptr, int)>();

  int __gmpz_divisible_2exp_p(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_divisible_2exp_p(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_divisible_2exp_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, mp_bitcnt_t)>>(
          '__gmpz_divisible_2exp_p');
  late final ___gmpz_divisible_2exp_p =
      ___gmpz_divisible_2exp_pPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_dump(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_dump(
      arg0,
    );
  }

  late final ___gmpz_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_srcptr)>>('__gmpz_dump');
  late final ___gmpz_dump =
      ___gmpz_dumpPtr.asFunction<void Function(mpz_srcptr)>();

  ffi.Pointer<ffi.Void> __gmpz_export(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Size> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    mpz_srcptr arg6,
  ) {
    return ___gmpz_export(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final ___gmpz_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Size,
              ffi.Int,
              ffi.Size,
              mpz_srcptr)>>('__gmpz_export');
  late final ___gmpz_export = ___gmpz_exportPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>, int, int, int, int, mpz_srcptr)>();

  void __gmpz_fac_ui(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_fac_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_fac_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.UnsignedLong)>>(
          '__gmpz_fac_ui');
  late final ___gmpz_fac_ui =
      ___gmpz_fac_uiPtr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_2fac_ui(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_2fac_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_2fac_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.UnsignedLong)>>(
          '__gmpz_2fac_ui');
  late final ___gmpz_2fac_ui =
      ___gmpz_2fac_uiPtr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_mfac_uiui(
    mpz_ptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpz_mfac_uiui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_mfac_uiuiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('__gmpz_mfac_uiui');
  late final ___gmpz_mfac_uiui =
      ___gmpz_mfac_uiuiPtr.asFunction<void Function(mpz_ptr, int, int)>();

  void __gmpz_primorial_ui(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_primorial_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_primorial_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.UnsignedLong)>>(
          '__gmpz_primorial_ui');
  late final ___gmpz_primorial_ui =
      ___gmpz_primorial_uiPtr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_fdiv_q(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_fdiv_q(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_fdiv_qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_fdiv_q');
  late final ___gmpz_fdiv_q = ___gmpz_fdiv_qPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_fdiv_q_2exp(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_fdiv_q_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_fdiv_q_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_fdiv_q_2exp');
  late final ___gmpz_fdiv_q_2exp = ___gmpz_fdiv_q_2expPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_fdiv_q_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_fdiv_q_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_fdiv_q_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_fdiv_q_ui');
  late final ___gmpz_fdiv_q_ui =
      ___gmpz_fdiv_q_uiPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_fdiv_qr(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
    mpz_srcptr arg3,
  ) {
    return ___gmpz_fdiv_qr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_fdiv_qrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_fdiv_qr');
  late final ___gmpz_fdiv_qr = ___gmpz_fdiv_qrPtr
      .asFunction<void Function(mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  int __gmpz_fdiv_qr_ui(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
    int arg3,
  ) {
    return ___gmpz_fdiv_qr_ui(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_fdiv_qr_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(mpz_ptr, mpz_ptr, mpz_srcptr,
              ffi.UnsignedLong)>>('__gmpz_fdiv_qr_ui');
  late final ___gmpz_fdiv_qr_ui = ___gmpz_fdiv_qr_uiPtr
      .asFunction<int Function(mpz_ptr, mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_fdiv_r(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_fdiv_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_fdiv_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_fdiv_r');
  late final ___gmpz_fdiv_r = ___gmpz_fdiv_rPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_fdiv_r_2exp(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_fdiv_r_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_fdiv_r_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_fdiv_r_2exp');
  late final ___gmpz_fdiv_r_2exp = ___gmpz_fdiv_r_2expPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_fdiv_r_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_fdiv_r_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_fdiv_r_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_fdiv_r_ui');
  late final ___gmpz_fdiv_r_ui =
      ___gmpz_fdiv_r_uiPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_fdiv_ui(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_fdiv_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_fdiv_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_fdiv_ui');
  late final ___gmpz_fdiv_ui =
      ___gmpz_fdiv_uiPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_fib_ui(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_fib_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_fib_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.UnsignedLong)>>(
          '__gmpz_fib_ui');
  late final ___gmpz_fib_ui =
      ___gmpz_fib_uiPtr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_fib2_ui(
    mpz_ptr arg0,
    mpz_ptr arg1,
    int arg2,
  ) {
    return ___gmpz_fib2_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_fib2_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_ptr, ffi.UnsignedLong)>>('__gmpz_fib2_ui');
  late final ___gmpz_fib2_ui =
      ___gmpz_fib2_uiPtr.asFunction<void Function(mpz_ptr, mpz_ptr, int)>();

  int __gmpz_fits_sint_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_fits_sint_p(
      arg0,
    );
  }

  late final ___gmpz_fits_sint_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_fits_sint_p');
  late final ___gmpz_fits_sint_p =
      ___gmpz_fits_sint_pPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_fits_slong_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_fits_slong_p(
      arg0,
    );
  }

  late final ___gmpz_fits_slong_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_fits_slong_p');
  late final ___gmpz_fits_slong_p =
      ___gmpz_fits_slong_pPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_fits_sshort_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_fits_sshort_p(
      arg0,
    );
  }

  late final ___gmpz_fits_sshort_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_fits_sshort_p');
  late final ___gmpz_fits_sshort_p =
      ___gmpz_fits_sshort_pPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_fits_uint_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_fits_uint_p(
      arg0,
    );
  }

  late final ___gmpz_fits_uint_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_fits_uint_p');
  late final ___gmpz_fits_uint_p =
      ___gmpz_fits_uint_pPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_fits_ulong_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_fits_ulong_p(
      arg0,
    );
  }

  late final ___gmpz_fits_ulong_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_fits_ulong_p');
  late final ___gmpz_fits_ulong_p =
      ___gmpz_fits_ulong_pPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_fits_ushort_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_fits_ushort_p(
      arg0,
    );
  }

  late final ___gmpz_fits_ushort_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_fits_ushort_p');
  late final ___gmpz_fits_ushort_p =
      ___gmpz_fits_ushort_pPtr.asFunction<int Function(mpz_srcptr)>();

  void __gmpz_gcd(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_gcd(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_gcdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_gcd');
  late final ___gmpz_gcd = ___gmpz_gcdPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  int __gmpz_gcd_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_gcd_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_gcd_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_gcd_ui');
  late final ___gmpz_gcd_ui =
      ___gmpz_gcd_uiPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_gcdext(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_ptr arg2,
    mpz_srcptr arg3,
    mpz_srcptr arg4,
  ) {
    return ___gmpz_gcdext(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpz_gcdextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr,
              mpz_srcptr)>>('__gmpz_gcdext');
  late final ___gmpz_gcdext = ___gmpz_gcdextPtr.asFunction<
      void Function(mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  double __gmpz_get_d(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_get_d(
      arg0,
    );
  }

  late final ___gmpz_get_dPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(mpz_srcptr)>>(
          '__gmpz_get_d');
  late final ___gmpz_get_d =
      ___gmpz_get_dPtr.asFunction<double Function(mpz_srcptr)>();

  double __gmpz_get_d_2exp(
    ffi.Pointer<ffi.Long> arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_get_d_2exp(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_get_d_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Long>, mpz_srcptr)>>('__gmpz_get_d_2exp');
  late final ___gmpz_get_d_2exp = ___gmpz_get_d_2expPtr
      .asFunction<double Function(ffi.Pointer<ffi.Long>, mpz_srcptr)>();

  int __gmpz_get_si(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_get_si(
      arg0,
    );
  }

  late final ___gmpz_get_siPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(mpz_srcptr)>>(
          '__gmpz_get_si');
  late final ___gmpz_get_si =
      ___gmpz_get_siPtr.asFunction<int Function(mpz_srcptr)>();

  ffi.Pointer<ffi.Utf8> __gmpz_get_str(
    ffi.Pointer<ffi.Utf8> arg0,
    int arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_get_str(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_get_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Utf8> Function(
              ffi.Pointer<ffi.Utf8>, ffi.Int, mpz_srcptr)>>('__gmpz_get_str');
  late final ___gmpz_get_str = ___gmpz_get_strPtr.asFunction<
      ffi.Pointer<ffi.Utf8> Function(ffi.Pointer<ffi.Utf8>, int, mpz_srcptr)>();

  int __gmpz_get_ui(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_get_ui(
      arg0,
    );
  }

  late final ___gmpz_get_uiPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(mpz_srcptr)>>(
          '__gmpz_get_ui');
  late final ___gmpz_get_ui =
      ___gmpz_get_uiPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_getlimbn(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_getlimbn(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_getlimbnPtr =
      _lookup<ffi.NativeFunction<mp_limb_t Function(mpz_srcptr, mp_size_t)>>(
          '__gmpz_getlimbn');
  late final ___gmpz_getlimbn =
      ___gmpz_getlimbnPtr.asFunction<int Function(mpz_srcptr, int)>();

  int __gmpz_hamdist(
    mpz_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_hamdist(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_hamdistPtr =
      _lookup<ffi.NativeFunction<mp_bitcnt_t Function(mpz_srcptr, mpz_srcptr)>>(
          '__gmpz_hamdist');
  late final ___gmpz_hamdist =
      ___gmpz_hamdistPtr.asFunction<int Function(mpz_srcptr, mpz_srcptr)>();

  void __gmpz_import(
    mpz_ptr arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Void> arg6,
  ) {
    return ___gmpz_import(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final ___gmpz_importPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, ffi.Size, ffi.Int, ffi.Size, ffi.Int,
              ffi.Size, ffi.Pointer<ffi.Void>)>>('__gmpz_import');
  late final ___gmpz_import = ___gmpz_importPtr.asFunction<
      void Function(mpz_ptr, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void __gmpz_init(
    mpz_ptr arg0,
  ) {
    return ___gmpz_init(
      arg0,
    );
  }

  late final ___gmpz_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr)>>('__gmpz_init');
  late final ___gmpz_init =
      ___gmpz_initPtr.asFunction<void Function(mpz_ptr)>();

  void __gmpz_init2(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_init2(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_init2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_bitcnt_t)>>(
          '__gmpz_init2');
  late final ___gmpz_init2 =
      ___gmpz_init2Ptr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_inits(
    mpz_ptr arg0,
  ) {
    return ___gmpz_inits(
      arg0,
    );
  }

  late final ___gmpz_initsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr)>>('__gmpz_inits');
  late final ___gmpz_inits =
      ___gmpz_initsPtr.asFunction<void Function(mpz_ptr)>();

  void __gmpz_init_set(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_init_set(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_init_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_init_set');
  late final ___gmpz_init_set =
      ___gmpz_init_setPtr.asFunction<void Function(mpz_ptr, mpz_srcptr)>();

  void __gmpz_init_set_d(
    mpz_ptr arg0,
    double arg1,
  ) {
    return ___gmpz_init_set_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_init_set_dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.Double)>>(
          '__gmpz_init_set_d');
  late final ___gmpz_init_set_d =
      ___gmpz_init_set_dPtr.asFunction<void Function(mpz_ptr, double)>();

  void __gmpz_init_set_si(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_init_set_si(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_init_set_siPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.Long)>>(
          '__gmpz_init_set_si');
  late final ___gmpz_init_set_si =
      ___gmpz_init_set_siPtr.asFunction<void Function(mpz_ptr, int)>();

  int __gmpz_init_set_str(
    mpz_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    int arg2,
  ) {
    return ___gmpz_init_set_str(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_init_set_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpz_ptr, ffi.Pointer<ffi.Utf8>, ffi.Int)>>('__gmpz_init_set_str');
  late final ___gmpz_init_set_str = ___gmpz_init_set_strPtr
      .asFunction<int Function(mpz_ptr, ffi.Pointer<ffi.Utf8>, int)>();

  void __gmpz_init_set_ui(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_init_set_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_init_set_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.UnsignedLong)>>(
          '__gmpz_init_set_ui');
  late final ___gmpz_init_set_ui =
      ___gmpz_init_set_uiPtr.asFunction<void Function(mpz_ptr, int)>();

  int __gmpz_invert(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_invert(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_invert');
  late final ___gmpz_invert = ___gmpz_invertPtr
      .asFunction<int Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_ior(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_ior(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_iorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_ior');
  late final ___gmpz_ior = ___gmpz_iorPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  int __gmpz_jacobi(
    mpz_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_jacobi(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_jacobiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, mpz_srcptr)>>(
          '__gmpz_jacobi');
  late final ___gmpz_jacobi =
      ___gmpz_jacobiPtr.asFunction<int Function(mpz_srcptr, mpz_srcptr)>();

  int __gmpz_kronecker_si(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_kronecker_si(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_kronecker_siPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.Long)>>(
          '__gmpz_kronecker_si');
  late final ___gmpz_kronecker_si =
      ___gmpz_kronecker_siPtr.asFunction<int Function(mpz_srcptr, int)>();

  int __gmpz_kronecker_ui(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_kronecker_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_kronecker_uiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.UnsignedLong)>>(
      '__gmpz_kronecker_ui');
  late final ___gmpz_kronecker_ui =
      ___gmpz_kronecker_uiPtr.asFunction<int Function(mpz_srcptr, int)>();

  int __gmpz_si_kronecker(
    int arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_si_kronecker(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_si_kroneckerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long, mpz_srcptr)>>(
          '__gmpz_si_kronecker');
  late final ___gmpz_si_kronecker =
      ___gmpz_si_kroneckerPtr.asFunction<int Function(int, mpz_srcptr)>();

  int __gmpz_ui_kronecker(
    int arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_ui_kronecker(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_ui_kroneckerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.UnsignedLong, mpz_srcptr)>>(
      '__gmpz_ui_kronecker');
  late final ___gmpz_ui_kronecker =
      ___gmpz_ui_kroneckerPtr.asFunction<int Function(int, mpz_srcptr)>();

  void __gmpz_lcm(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_lcm(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_lcmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_lcm');
  late final ___gmpz_lcm = ___gmpz_lcmPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_lcm_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_lcm_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_lcm_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_lcm_ui');
  late final ___gmpz_lcm_ui =
      ___gmpz_lcm_uiPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_lucnum_ui(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_lucnum_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_lucnum_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.UnsignedLong)>>(
          '__gmpz_lucnum_ui');
  late final ___gmpz_lucnum_ui =
      ___gmpz_lucnum_uiPtr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_lucnum2_ui(
    mpz_ptr arg0,
    mpz_ptr arg1,
    int arg2,
  ) {
    return ___gmpz_lucnum2_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_lucnum2_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_ptr, ffi.UnsignedLong)>>('__gmpz_lucnum2_ui');
  late final ___gmpz_lucnum2_ui =
      ___gmpz_lucnum2_uiPtr.asFunction<void Function(mpz_ptr, mpz_ptr, int)>();

  int __gmpz_millerrabin(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_millerrabin(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_millerrabinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.Int)>>(
          '__gmpz_millerrabin');
  late final ___gmpz_millerrabin =
      ___gmpz_millerrabinPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_mod(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_mod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_mod');
  late final ___gmpz_mod = ___gmpz_modPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_mul(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_mul');
  late final ___gmpz_mul = ___gmpz_mulPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_mul_2exp(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_mul_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_mul_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_mul_2exp');
  late final ___gmpz_mul_2exp =
      ___gmpz_mul_2expPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_mul_si(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_mul_si(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_mul_siPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, ffi.Long)>>(
      '__gmpz_mul_si');
  late final ___gmpz_mul_si =
      ___gmpz_mul_siPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_mul_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_mul_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_mul_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_mul_ui');
  late final ___gmpz_mul_ui =
      ___gmpz_mul_uiPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_neg(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_neg(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_negPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_neg');
  late final ___gmpz_neg =
      ___gmpz_negPtr.asFunction<void Function(mpz_ptr, mpz_srcptr)>();

  void __gmpz_nextprime(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_nextprime(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_nextprimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_nextprime');
  late final ___gmpz_nextprime =
      ___gmpz_nextprimePtr.asFunction<void Function(mpz_ptr, mpz_srcptr)>();

  int __gmpz_prevprime(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_prevprime(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_prevprimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_prevprime');
  late final ___gmpz_prevprime =
      ___gmpz_prevprimePtr.asFunction<int Function(mpz_ptr, mpz_srcptr)>();

  int __gmpz_perfect_power_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_perfect_power_p(
      arg0,
    );
  }

  late final ___gmpz_perfect_power_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_perfect_power_p');
  late final ___gmpz_perfect_power_p =
      ___gmpz_perfect_power_pPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_perfect_square_p(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_perfect_square_p(
      arg0,
    );
  }

  late final ___gmpz_perfect_square_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr)>>(
          '__gmpz_perfect_square_p');
  late final ___gmpz_perfect_square_p =
      ___gmpz_perfect_square_pPtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_popcount(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_popcount(
      arg0,
    );
  }

  late final ___gmpz_popcountPtr =
      _lookup<ffi.NativeFunction<mp_bitcnt_t Function(mpz_srcptr)>>(
          '__gmpz_popcount');
  late final ___gmpz_popcount =
      ___gmpz_popcountPtr.asFunction<int Function(mpz_srcptr)>();

  void __gmpz_pow_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_pow_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_pow_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_pow_ui');
  late final ___gmpz_pow_ui =
      ___gmpz_pow_uiPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_powm(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
    mpz_srcptr arg3,
  ) {
    return ___gmpz_powm(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_powmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_powm');
  late final ___gmpz_powm = ___gmpz_powmPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_powm_sec(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
    mpz_srcptr arg3,
  ) {
    return ___gmpz_powm_sec(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_powm_secPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_powm_sec');
  late final ___gmpz_powm_sec = ___gmpz_powm_secPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_powm_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
    mpz_srcptr arg3,
  ) {
    return ___gmpz_powm_ui(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_powm_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, ffi.UnsignedLong,
              mpz_srcptr)>>('__gmpz_powm_ui');
  late final ___gmpz_powm_ui = ___gmpz_powm_uiPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int, mpz_srcptr)>();

  int __gmpz_probab_prime_p(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_probab_prime_p(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_probab_prime_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, ffi.Int)>>(
          '__gmpz_probab_prime_p');
  late final ___gmpz_probab_prime_p =
      ___gmpz_probab_prime_pPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_random(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_random(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_randomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_size_t)>>(
          '__gmpz_random');
  late final ___gmpz_random =
      ___gmpz_randomPtr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_random2(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_random2(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_random2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_size_t)>>(
          '__gmpz_random2');
  late final ___gmpz_random2 =
      ___gmpz_random2Ptr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_realloc2(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_realloc2(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_realloc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_bitcnt_t)>>(
          '__gmpz_realloc2');
  late final ___gmpz_realloc2 =
      ___gmpz_realloc2Ptr.asFunction<void Function(mpz_ptr, int)>();

  int __gmpz_remove(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_remove(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_removePtr = _lookup<
      ffi.NativeFunction<
          mp_bitcnt_t Function(
              mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_remove');
  late final ___gmpz_remove = ___gmpz_removePtr
      .asFunction<int Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  int __gmpz_root(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_root(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_rootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_root');
  late final ___gmpz_root =
      ___gmpz_rootPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_rootrem(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
    int arg3,
  ) {
    return ___gmpz_rootrem(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_rootremPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_ptr, mpz_srcptr,
              ffi.UnsignedLong)>>('__gmpz_rootrem');
  late final ___gmpz_rootrem = ___gmpz_rootremPtr
      .asFunction<void Function(mpz_ptr, mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_rrandomb(
    mpz_ptr arg0,
    gmp_randstate_ptr arg1,
    int arg2,
  ) {
    return ___gmpz_rrandomb(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_rrandombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, gmp_randstate_ptr, mp_bitcnt_t)>>('__gmpz_rrandomb');
  late final ___gmpz_rrandomb = ___gmpz_rrandombPtr
      .asFunction<void Function(mpz_ptr, gmp_randstate_ptr, int)>();

  int __gmpz_scan0(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_scan0(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_scan0Ptr = _lookup<
          ffi.NativeFunction<mp_bitcnt_t Function(mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_scan0');
  late final ___gmpz_scan0 =
      ___gmpz_scan0Ptr.asFunction<int Function(mpz_srcptr, int)>();

  int __gmpz_scan1(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_scan1(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_scan1Ptr = _lookup<
          ffi.NativeFunction<mp_bitcnt_t Function(mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_scan1');
  late final ___gmpz_scan1 =
      ___gmpz_scan1Ptr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_set(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_set(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_set');
  late final ___gmpz_set =
      ___gmpz_setPtr.asFunction<void Function(mpz_ptr, mpz_srcptr)>();

  void __gmpz_set_d(
    mpz_ptr arg0,
    double arg1,
  ) {
    return ___gmpz_set_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_set_dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.Double)>>(
          '__gmpz_set_d');
  late final ___gmpz_set_d =
      ___gmpz_set_dPtr.asFunction<void Function(mpz_ptr, double)>();

  void __gmpz_set_f(
    mpz_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpz_set_f(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_set_fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpf_srcptr)>>(
          '__gmpz_set_f');
  late final ___gmpz_set_f =
      ___gmpz_set_fPtr.asFunction<void Function(mpz_ptr, mpf_srcptr)>();

  void __gmpz_set_q(
    mpz_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpz_set_q(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_set_qPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpq_srcptr)>>(
          '__gmpz_set_q');
  late final ___gmpz_set_q =
      ___gmpz_set_qPtr.asFunction<void Function(mpz_ptr, mpq_srcptr)>();

  void __gmpz_set_si(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_set_si(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_set_siPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.Long)>>(
          '__gmpz_set_si');
  late final ___gmpz_set_si =
      ___gmpz_set_siPtr.asFunction<void Function(mpz_ptr, int)>();

  int __gmpz_set_str(
    mpz_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    int arg2,
  ) {
    return ___gmpz_set_str(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_set_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpz_ptr, ffi.Pointer<ffi.Utf8>, ffi.Int)>>('__gmpz_set_str');
  late final ___gmpz_set_str = ___gmpz_set_strPtr
      .asFunction<int Function(mpz_ptr, ffi.Pointer<ffi.Utf8>, int)>();

  void __gmpz_set_ui(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_set_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_set_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, ffi.UnsignedLong)>>(
          '__gmpz_set_ui');
  late final ___gmpz_set_ui =
      ___gmpz_set_uiPtr.asFunction<void Function(mpz_ptr, int)>();

  void __gmpz_setbit(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_setbit(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_setbitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_bitcnt_t)>>(
          '__gmpz_setbit');
  late final ___gmpz_setbit =
      ___gmpz_setbitPtr.asFunction<void Function(mpz_ptr, int)>();

  int __gmpz_size(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_size(
      arg0,
    );
  }

  late final ___gmpz_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(mpz_srcptr)>>('__gmpz_size');
  late final ___gmpz_size =
      ___gmpz_sizePtr.asFunction<int Function(mpz_srcptr)>();

  int __gmpz_sizeinbase(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_sizeinbase(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_sizeinbasePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(mpz_srcptr, ffi.Int)>>(
          '__gmpz_sizeinbase');
  late final ___gmpz_sizeinbase =
      ___gmpz_sizeinbasePtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_sqrt(
    mpz_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpz_sqrt(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr)>>(
          '__gmpz_sqrt');
  late final ___gmpz_sqrt =
      ___gmpz_sqrtPtr.asFunction<void Function(mpz_ptr, mpz_srcptr)>();

  void __gmpz_sqrtrem(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_sqrtrem(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_sqrtremPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_ptr, mpz_srcptr)>>(
      '__gmpz_sqrtrem');
  late final ___gmpz_sqrtrem = ___gmpz_sqrtremPtr
      .asFunction<void Function(mpz_ptr, mpz_ptr, mpz_srcptr)>();

  void __gmpz_sub(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_sub');
  late final ___gmpz_sub = ___gmpz_subPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_sub_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_sub_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_sub_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_sub_ui');
  late final ___gmpz_sub_ui =
      ___gmpz_sub_uiPtr.asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_ui_sub(
    mpz_ptr arg0,
    int arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_ui_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_ui_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, ffi.UnsignedLong, mpz_srcptr)>>('__gmpz_ui_sub');
  late final ___gmpz_ui_sub =
      ___gmpz_ui_subPtr.asFunction<void Function(mpz_ptr, int, mpz_srcptr)>();

  void __gmpz_submul(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_submul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_submulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_submul');
  late final ___gmpz_submul = ___gmpz_submulPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_submul_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_submul_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_submul_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_submul_ui');
  late final ___gmpz_submul_ui = ___gmpz_submul_uiPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_swap(
    mpz_ptr arg0,
    mpz_ptr arg1,
  ) {
    return ___gmpz_swap(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpz_ptr)>>(
          '__gmpz_swap');
  late final ___gmpz_swap =
      ___gmpz_swapPtr.asFunction<void Function(mpz_ptr, mpz_ptr)>();

  int __gmpz_tdiv_ui(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_tdiv_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_tdiv_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_tdiv_ui');
  late final ___gmpz_tdiv_ui =
      ___gmpz_tdiv_uiPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_tdiv_q(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_tdiv_q(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_tdiv_qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_tdiv_q');
  late final ___gmpz_tdiv_q = ___gmpz_tdiv_qPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_tdiv_q_2exp(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_tdiv_q_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_tdiv_q_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_tdiv_q_2exp');
  late final ___gmpz_tdiv_q_2exp = ___gmpz_tdiv_q_2expPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_tdiv_q_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_tdiv_q_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_tdiv_q_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_tdiv_q_ui');
  late final ___gmpz_tdiv_q_ui =
      ___gmpz_tdiv_q_uiPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_tdiv_qr(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
    mpz_srcptr arg3,
  ) {
    return ___gmpz_tdiv_qr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_tdiv_qrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_tdiv_qr');
  late final ___gmpz_tdiv_qr = ___gmpz_tdiv_qrPtr
      .asFunction<void Function(mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  int __gmpz_tdiv_qr_ui(
    mpz_ptr arg0,
    mpz_ptr arg1,
    mpz_srcptr arg2,
    int arg3,
  ) {
    return ___gmpz_tdiv_qr_ui(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpz_tdiv_qr_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(mpz_ptr, mpz_ptr, mpz_srcptr,
              ffi.UnsignedLong)>>('__gmpz_tdiv_qr_ui');
  late final ___gmpz_tdiv_qr_ui = ___gmpz_tdiv_qr_uiPtr
      .asFunction<int Function(mpz_ptr, mpz_ptr, mpz_srcptr, int)>();

  void __gmpz_tdiv_r(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_tdiv_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_tdiv_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_tdiv_r');
  late final ___gmpz_tdiv_r = ___gmpz_tdiv_rPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  void __gmpz_tdiv_r_2exp(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_tdiv_r_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_tdiv_r_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpz_ptr, mpz_srcptr, mp_bitcnt_t)>>(
      '__gmpz_tdiv_r_2exp');
  late final ___gmpz_tdiv_r_2exp = ___gmpz_tdiv_r_2expPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_tdiv_r_ui(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_tdiv_r_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_tdiv_r_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              mpz_ptr, mpz_srcptr, ffi.UnsignedLong)>>('__gmpz_tdiv_r_ui');
  late final ___gmpz_tdiv_r_ui =
      ___gmpz_tdiv_r_uiPtr.asFunction<int Function(mpz_ptr, mpz_srcptr, int)>();

  int __gmpz_tstbit(
    mpz_srcptr arg0,
    int arg1,
  ) {
    return ___gmpz_tstbit(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_tstbitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpz_srcptr, mp_bitcnt_t)>>(
          '__gmpz_tstbit');
  late final ___gmpz_tstbit =
      ___gmpz_tstbitPtr.asFunction<int Function(mpz_srcptr, int)>();

  void __gmpz_ui_pow_ui(
    mpz_ptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpz_ui_pow_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_ui_pow_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('__gmpz_ui_pow_ui');
  late final ___gmpz_ui_pow_ui =
      ___gmpz_ui_pow_uiPtr.asFunction<void Function(mpz_ptr, int, int)>();

  void __gmpz_urandomb(
    mpz_ptr arg0,
    gmp_randstate_ptr arg1,
    int arg2,
  ) {
    return ___gmpz_urandomb(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_urandombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, gmp_randstate_ptr, mp_bitcnt_t)>>('__gmpz_urandomb');
  late final ___gmpz_urandomb = ___gmpz_urandombPtr
      .asFunction<void Function(mpz_ptr, gmp_randstate_ptr, int)>();

  void __gmpz_urandomm(
    mpz_ptr arg0,
    gmp_randstate_ptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_urandomm(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_urandommPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, gmp_randstate_ptr, mpz_srcptr)>>('__gmpz_urandomm');
  late final ___gmpz_urandomm = ___gmpz_urandommPtr
      .asFunction<void Function(mpz_ptr, gmp_randstate_ptr, mpz_srcptr)>();

  void __gmpz_xor(
    mpz_ptr arg0,
    mpz_srcptr arg1,
    mpz_srcptr arg2,
  ) {
    return ___gmpz_xor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_xorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>>('__gmpz_xor');
  late final ___gmpz_xor = ___gmpz_xorPtr
      .asFunction<void Function(mpz_ptr, mpz_srcptr, mpz_srcptr)>();

  mp_srcptr __gmpz_limbs_read(
    mpz_srcptr arg0,
  ) {
    return ___gmpz_limbs_read(
      arg0,
    );
  }

  late final ___gmpz_limbs_readPtr =
      _lookup<ffi.NativeFunction<mp_srcptr Function(mpz_srcptr)>>(
          '__gmpz_limbs_read');
  late final ___gmpz_limbs_read =
      ___gmpz_limbs_readPtr.asFunction<mp_srcptr Function(mpz_srcptr)>();

  mp_ptr __gmpz_limbs_write(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_limbs_write(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_limbs_writePtr =
      _lookup<ffi.NativeFunction<mp_ptr Function(mpz_ptr, mp_size_t)>>(
          '__gmpz_limbs_write');
  late final ___gmpz_limbs_write =
      ___gmpz_limbs_writePtr.asFunction<mp_ptr Function(mpz_ptr, int)>();

  mp_ptr __gmpz_limbs_modify(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_limbs_modify(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_limbs_modifyPtr =
      _lookup<ffi.NativeFunction<mp_ptr Function(mpz_ptr, mp_size_t)>>(
          '__gmpz_limbs_modify');
  late final ___gmpz_limbs_modify =
      ___gmpz_limbs_modifyPtr.asFunction<mp_ptr Function(mpz_ptr, int)>();

  void __gmpz_limbs_finish(
    mpz_ptr arg0,
    int arg1,
  ) {
    return ___gmpz_limbs_finish(
      arg0,
      arg1,
    );
  }

  late final ___gmpz_limbs_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mp_size_t)>>(
          '__gmpz_limbs_finish');
  late final ___gmpz_limbs_finish =
      ___gmpz_limbs_finishPtr.asFunction<void Function(mpz_ptr, int)>();

  mpz_srcptr __gmpz_roinit_n(
    mpz_ptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpz_roinit_n(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpz_roinit_nPtr = _lookup<
          ffi
          .NativeFunction<mpz_srcptr Function(mpz_ptr, mp_srcptr, mp_size_t)>>(
      '__gmpz_roinit_n');
  late final ___gmpz_roinit_n = ___gmpz_roinit_nPtr
      .asFunction<mpz_srcptr Function(mpz_ptr, mp_srcptr, int)>();

  void __gmpq_abs(
    mpq_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_abs(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_absPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpq_srcptr)>>(
          '__gmpq_abs');
  late final ___gmpq_abs =
      ___gmpq_absPtr.asFunction<void Function(mpq_ptr, mpq_srcptr)>();

  void __gmpq_add(
    mpq_ptr arg0,
    mpq_srcptr arg1,
    mpq_srcptr arg2,
  ) {
    return ___gmpq_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>>('__gmpq_add');
  late final ___gmpq_add = ___gmpq_addPtr
      .asFunction<void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>();

  void __gmpq_canonicalize(
    mpq_ptr arg0,
  ) {
    return ___gmpq_canonicalize(
      arg0,
    );
  }

  late final ___gmpq_canonicalizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr)>>(
          '__gmpq_canonicalize');
  late final ___gmpq_canonicalize =
      ___gmpq_canonicalizePtr.asFunction<void Function(mpq_ptr)>();

  void __gmpq_clear(
    mpq_ptr arg0,
  ) {
    return ___gmpq_clear(
      arg0,
    );
  }

  late final ___gmpq_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr)>>('__gmpq_clear');
  late final ___gmpq_clear =
      ___gmpq_clearPtr.asFunction<void Function(mpq_ptr)>();

  void __gmpq_clears(
    mpq_ptr arg0,
  ) {
    return ___gmpq_clears(
      arg0,
    );
  }

  late final ___gmpq_clearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr)>>('__gmpq_clears');
  late final ___gmpq_clears =
      ___gmpq_clearsPtr.asFunction<void Function(mpq_ptr)>();

  int __gmpq_cmp(
    mpq_srcptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_cmp(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_cmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpq_srcptr, mpq_srcptr)>>(
          '__gmpq_cmp');
  late final ___gmpq_cmp =
      ___gmpq_cmpPtr.asFunction<int Function(mpq_srcptr, mpq_srcptr)>();

  int __gmpq_cmp_si(
    mpq_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpq_cmp_si(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_cmp_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpq_srcptr, ffi.Long, ffi.UnsignedLong)>>('__gmpq_cmp_si');
  late final ___gmpq_cmp_si =
      ___gmpq_cmp_siPtr.asFunction<int Function(mpq_srcptr, int, int)>();

  int __gmpq_cmp_ui(
    mpq_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpq_cmp_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_cmp_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpq_srcptr, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('__gmpq_cmp_ui');
  late final ___gmpq_cmp_ui =
      ___gmpq_cmp_uiPtr.asFunction<int Function(mpq_srcptr, int, int)>();

  int __gmpq_cmp_z(
    mpq_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpq_cmp_z(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_cmp_zPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpq_srcptr, mpz_srcptr)>>(
          '__gmpq_cmp_z');
  late final ___gmpq_cmp_z =
      ___gmpq_cmp_zPtr.asFunction<int Function(mpq_srcptr, mpz_srcptr)>();

  void __gmpq_div(
    mpq_ptr arg0,
    mpq_srcptr arg1,
    mpq_srcptr arg2,
  ) {
    return ___gmpq_div(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>>('__gmpq_div');
  late final ___gmpq_div = ___gmpq_divPtr
      .asFunction<void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>();

  void __gmpq_div_2exp(
    mpq_ptr arg0,
    mpq_srcptr arg1,
    int arg2,
  ) {
    return ___gmpq_div_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_div_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpq_ptr, mpq_srcptr, mp_bitcnt_t)>>(
      '__gmpq_div_2exp');
  late final ___gmpq_div_2exp =
      ___gmpq_div_2expPtr.asFunction<void Function(mpq_ptr, mpq_srcptr, int)>();

  int __gmpq_equal(
    mpq_srcptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_equal(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpq_srcptr, mpq_srcptr)>>(
          '__gmpq_equal');
  late final ___gmpq_equal =
      ___gmpq_equalPtr.asFunction<int Function(mpq_srcptr, mpq_srcptr)>();

  void __gmpq_get_num(
    mpz_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_get_num(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_get_numPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpq_srcptr)>>(
          '__gmpq_get_num');
  late final ___gmpq_get_num =
      ___gmpq_get_numPtr.asFunction<void Function(mpz_ptr, mpq_srcptr)>();

  void __gmpq_get_den(
    mpz_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_get_den(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_get_denPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpz_ptr, mpq_srcptr)>>(
          '__gmpq_get_den');
  late final ___gmpq_get_den =
      ___gmpq_get_denPtr.asFunction<void Function(mpz_ptr, mpq_srcptr)>();

  double __gmpq_get_d(
    mpq_srcptr arg0,
  ) {
    return ___gmpq_get_d(
      arg0,
    );
  }

  late final ___gmpq_get_dPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(mpq_srcptr)>>(
          '__gmpq_get_d');
  late final ___gmpq_get_d =
      ___gmpq_get_dPtr.asFunction<double Function(mpq_srcptr)>();

  ffi.Pointer<ffi.Utf8> __gmpq_get_str(
    ffi.Pointer<ffi.Utf8> arg0,
    int arg1,
    mpq_srcptr arg2,
  ) {
    return ___gmpq_get_str(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_get_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Utf8> Function(
              ffi.Pointer<ffi.Utf8>, ffi.Int, mpq_srcptr)>>('__gmpq_get_str');
  late final ___gmpq_get_str = ___gmpq_get_strPtr.asFunction<
      ffi.Pointer<ffi.Utf8> Function(ffi.Pointer<ffi.Utf8>, int, mpq_srcptr)>();

  void __gmpq_init(
    mpq_ptr arg0,
  ) {
    return ___gmpq_init(
      arg0,
    );
  }

  late final ___gmpq_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr)>>('__gmpq_init');
  late final ___gmpq_init =
      ___gmpq_initPtr.asFunction<void Function(mpq_ptr)>();

  void __gmpq_inits(
    mpq_ptr arg0,
  ) {
    return ___gmpq_inits(
      arg0,
    );
  }

  late final ___gmpq_initsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr)>>('__gmpq_inits');
  late final ___gmpq_inits =
      ___gmpq_initsPtr.asFunction<void Function(mpq_ptr)>();

  void __gmpq_inv(
    mpq_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_inv(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_invPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpq_srcptr)>>(
          '__gmpq_inv');
  late final ___gmpq_inv =
      ___gmpq_invPtr.asFunction<void Function(mpq_ptr, mpq_srcptr)>();

  void __gmpq_mul(
    mpq_ptr arg0,
    mpq_srcptr arg1,
    mpq_srcptr arg2,
  ) {
    return ___gmpq_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>>('__gmpq_mul');
  late final ___gmpq_mul = ___gmpq_mulPtr
      .asFunction<void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>();

  void __gmpq_mul_2exp(
    mpq_ptr arg0,
    mpq_srcptr arg1,
    int arg2,
  ) {
    return ___gmpq_mul_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_mul_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpq_ptr, mpq_srcptr, mp_bitcnt_t)>>(
      '__gmpq_mul_2exp');
  late final ___gmpq_mul_2exp =
      ___gmpq_mul_2expPtr.asFunction<void Function(mpq_ptr, mpq_srcptr, int)>();

  void __gmpq_neg(
    mpq_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_neg(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_negPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpq_srcptr)>>(
          '__gmpq_neg');
  late final ___gmpq_neg =
      ___gmpq_negPtr.asFunction<void Function(mpq_ptr, mpq_srcptr)>();

  void __gmpq_set(
    mpq_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpq_set(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpq_srcptr)>>(
          '__gmpq_set');
  late final ___gmpq_set =
      ___gmpq_setPtr.asFunction<void Function(mpq_ptr, mpq_srcptr)>();

  void __gmpq_set_d(
    mpq_ptr arg0,
    double arg1,
  ) {
    return ___gmpq_set_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_set_dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, ffi.Double)>>(
          '__gmpq_set_d');
  late final ___gmpq_set_d =
      ___gmpq_set_dPtr.asFunction<void Function(mpq_ptr, double)>();

  void __gmpq_set_den(
    mpq_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpq_set_den(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_set_denPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpz_srcptr)>>(
          '__gmpq_set_den');
  late final ___gmpq_set_den =
      ___gmpq_set_denPtr.asFunction<void Function(mpq_ptr, mpz_srcptr)>();

  void __gmpq_set_f(
    mpq_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpq_set_f(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_set_fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpf_srcptr)>>(
          '__gmpq_set_f');
  late final ___gmpq_set_f =
      ___gmpq_set_fPtr.asFunction<void Function(mpq_ptr, mpf_srcptr)>();

  void __gmpq_set_num(
    mpq_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpq_set_num(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_set_numPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpz_srcptr)>>(
          '__gmpq_set_num');
  late final ___gmpq_set_num =
      ___gmpq_set_numPtr.asFunction<void Function(mpq_ptr, mpz_srcptr)>();

  void __gmpq_set_si(
    mpq_ptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpq_set_si(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_set_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpq_ptr, ffi.Long, ffi.UnsignedLong)>>('__gmpq_set_si');
  late final ___gmpq_set_si =
      ___gmpq_set_siPtr.asFunction<void Function(mpq_ptr, int, int)>();

  int __gmpq_set_str(
    mpq_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    int arg2,
  ) {
    return ___gmpq_set_str(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_set_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpq_ptr, ffi.Pointer<ffi.Utf8>, ffi.Int)>>('__gmpq_set_str');
  late final ___gmpq_set_str = ___gmpq_set_strPtr
      .asFunction<int Function(mpq_ptr, ffi.Pointer<ffi.Utf8>, int)>();

  void __gmpq_set_ui(
    mpq_ptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpq_set_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_set_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpq_ptr, ffi.UnsignedLong, ffi.UnsignedLong)>>('__gmpq_set_ui');
  late final ___gmpq_set_ui =
      ___gmpq_set_uiPtr.asFunction<void Function(mpq_ptr, int, int)>();

  void __gmpq_set_z(
    mpq_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpq_set_z(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_set_zPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpz_srcptr)>>(
          '__gmpq_set_z');
  late final ___gmpq_set_z =
      ___gmpq_set_zPtr.asFunction<void Function(mpq_ptr, mpz_srcptr)>();

  void __gmpq_sub(
    mpq_ptr arg0,
    mpq_srcptr arg1,
    mpq_srcptr arg2,
  ) {
    return ___gmpq_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpq_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>>('__gmpq_sub');
  late final ___gmpq_sub = ___gmpq_subPtr
      .asFunction<void Function(mpq_ptr, mpq_srcptr, mpq_srcptr)>();

  void __gmpq_swap(
    mpq_ptr arg0,
    mpq_ptr arg1,
  ) {
    return ___gmpq_swap(
      arg0,
      arg1,
    );
  }

  late final ___gmpq_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpq_ptr)>>(
          '__gmpq_swap');
  late final ___gmpq_swap =
      ___gmpq_swapPtr.asFunction<void Function(mpq_ptr, mpq_ptr)>();

  void __gmpf_abs(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_abs(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_absPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_abs');
  late final ___gmpf_abs =
      ___gmpf_absPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  void __gmpf_add(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    mpf_srcptr arg2,
  ) {
    return ___gmpf_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>>('__gmpf_add');
  late final ___gmpf_add = ___gmpf_addPtr
      .asFunction<void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>();

  void __gmpf_add_ui(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_add_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_add_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, mpf_srcptr, ffi.UnsignedLong)>>('__gmpf_add_ui');
  late final ___gmpf_add_ui =
      ___gmpf_add_uiPtr.asFunction<void Function(mpf_ptr, mpf_srcptr, int)>();

  void __gmpf_ceil(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_ceil(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_ceil');
  late final ___gmpf_ceil =
      ___gmpf_ceilPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  void __gmpf_clear(
    mpf_ptr arg0,
  ) {
    return ___gmpf_clear(
      arg0,
    );
  }

  late final ___gmpf_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr)>>('__gmpf_clear');
  late final ___gmpf_clear =
      ___gmpf_clearPtr.asFunction<void Function(mpf_ptr)>();

  void __gmpf_clears(
    mpf_ptr arg0,
  ) {
    return ___gmpf_clears(
      arg0,
    );
  }

  late final ___gmpf_clearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr)>>('__gmpf_clears');
  late final ___gmpf_clears =
      ___gmpf_clearsPtr.asFunction<void Function(mpf_ptr)>();

  int __gmpf_cmp(
    mpf_srcptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_cmp(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_cmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr, mpf_srcptr)>>(
          '__gmpf_cmp');
  late final ___gmpf_cmp =
      ___gmpf_cmpPtr.asFunction<int Function(mpf_srcptr, mpf_srcptr)>();

  int __gmpf_cmp_z(
    mpf_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpf_cmp_z(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_cmp_zPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr, mpz_srcptr)>>(
          '__gmpf_cmp_z');
  late final ___gmpf_cmp_z =
      ___gmpf_cmp_zPtr.asFunction<int Function(mpf_srcptr, mpz_srcptr)>();

  int __gmpf_cmp_d(
    mpf_srcptr arg0,
    double arg1,
  ) {
    return ___gmpf_cmp_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_cmp_dPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr, ffi.Double)>>(
          '__gmpf_cmp_d');
  late final ___gmpf_cmp_d =
      ___gmpf_cmp_dPtr.asFunction<int Function(mpf_srcptr, double)>();

  int __gmpf_cmp_si(
    mpf_srcptr arg0,
    int arg1,
  ) {
    return ___gmpf_cmp_si(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_cmp_siPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr, ffi.Long)>>(
          '__gmpf_cmp_si');
  late final ___gmpf_cmp_si =
      ___gmpf_cmp_siPtr.asFunction<int Function(mpf_srcptr, int)>();

  int __gmpf_cmp_ui(
    mpf_srcptr arg0,
    int arg1,
  ) {
    return ___gmpf_cmp_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_cmp_uiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpf_srcptr, ffi.UnsignedLong)>>(
      '__gmpf_cmp_ui');
  late final ___gmpf_cmp_ui =
      ___gmpf_cmp_uiPtr.asFunction<int Function(mpf_srcptr, int)>();

  void __gmpf_div(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    mpf_srcptr arg2,
  ) {
    return ___gmpf_div(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>>('__gmpf_div');
  late final ___gmpf_div = ___gmpf_divPtr
      .asFunction<void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>();

  void __gmpf_div_2exp(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_div_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_div_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr, mp_bitcnt_t)>>(
      '__gmpf_div_2exp');
  late final ___gmpf_div_2exp =
      ___gmpf_div_2expPtr.asFunction<void Function(mpf_ptr, mpf_srcptr, int)>();

  void __gmpf_div_ui(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_div_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_div_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, mpf_srcptr, ffi.UnsignedLong)>>('__gmpf_div_ui');
  late final ___gmpf_div_ui =
      ___gmpf_div_uiPtr.asFunction<void Function(mpf_ptr, mpf_srcptr, int)>();

  void __gmpf_dump(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_dump(
      arg0,
    );
  }

  late final ___gmpf_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_srcptr)>>('__gmpf_dump');
  late final ___gmpf_dump =
      ___gmpf_dumpPtr.asFunction<void Function(mpf_srcptr)>();

  int __gmpf_eq(
    mpf_srcptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_eqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpf_srcptr, mpf_srcptr, mp_bitcnt_t)>>('__gmpf_eq');
  late final ___gmpf_eq =
      ___gmpf_eqPtr.asFunction<int Function(mpf_srcptr, mpf_srcptr, int)>();

  int __gmpf_fits_sint_p(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_fits_sint_p(
      arg0,
    );
  }

  late final ___gmpf_fits_sint_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr)>>(
          '__gmpf_fits_sint_p');
  late final ___gmpf_fits_sint_p =
      ___gmpf_fits_sint_pPtr.asFunction<int Function(mpf_srcptr)>();

  int __gmpf_fits_slong_p(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_fits_slong_p(
      arg0,
    );
  }

  late final ___gmpf_fits_slong_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr)>>(
          '__gmpf_fits_slong_p');
  late final ___gmpf_fits_slong_p =
      ___gmpf_fits_slong_pPtr.asFunction<int Function(mpf_srcptr)>();

  int __gmpf_fits_sshort_p(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_fits_sshort_p(
      arg0,
    );
  }

  late final ___gmpf_fits_sshort_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr)>>(
          '__gmpf_fits_sshort_p');
  late final ___gmpf_fits_sshort_p =
      ___gmpf_fits_sshort_pPtr.asFunction<int Function(mpf_srcptr)>();

  int __gmpf_fits_uint_p(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_fits_uint_p(
      arg0,
    );
  }

  late final ___gmpf_fits_uint_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr)>>(
          '__gmpf_fits_uint_p');
  late final ___gmpf_fits_uint_p =
      ___gmpf_fits_uint_pPtr.asFunction<int Function(mpf_srcptr)>();

  int __gmpf_fits_ulong_p(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_fits_ulong_p(
      arg0,
    );
  }

  late final ___gmpf_fits_ulong_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr)>>(
          '__gmpf_fits_ulong_p');
  late final ___gmpf_fits_ulong_p =
      ___gmpf_fits_ulong_pPtr.asFunction<int Function(mpf_srcptr)>();

  int __gmpf_fits_ushort_p(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_fits_ushort_p(
      arg0,
    );
  }

  late final ___gmpf_fits_ushort_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr)>>(
          '__gmpf_fits_ushort_p');
  late final ___gmpf_fits_ushort_p =
      ___gmpf_fits_ushort_pPtr.asFunction<int Function(mpf_srcptr)>();

  void __gmpf_floor(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_floor(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_floorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_floor');
  late final ___gmpf_floor =
      ___gmpf_floorPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  double __gmpf_get_d(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_get_d(
      arg0,
    );
  }

  late final ___gmpf_get_dPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(mpf_srcptr)>>(
          '__gmpf_get_d');
  late final ___gmpf_get_d =
      ___gmpf_get_dPtr.asFunction<double Function(mpf_srcptr)>();

  double __gmpf_get_d_2exp(
    ffi.Pointer<ffi.Long> arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_get_d_2exp(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_get_d_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Long>, mpf_srcptr)>>('__gmpf_get_d_2exp');
  late final ___gmpf_get_d_2exp = ___gmpf_get_d_2expPtr
      .asFunction<double Function(ffi.Pointer<ffi.Long>, mpf_srcptr)>();

  int __gmpf_get_default_prec() {
    return ___gmpf_get_default_prec();
  }

  late final ___gmpf_get_default_precPtr =
      _lookup<ffi.NativeFunction<mp_bitcnt_t Function()>>(
          '__gmpf_get_default_prec');
  late final ___gmpf_get_default_prec =
      ___gmpf_get_default_precPtr.asFunction<int Function()>();

  int __gmpf_get_prec(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_get_prec(
      arg0,
    );
  }

  late final ___gmpf_get_precPtr =
      _lookup<ffi.NativeFunction<mp_bitcnt_t Function(mpf_srcptr)>>(
          '__gmpf_get_prec');
  late final ___gmpf_get_prec =
      ___gmpf_get_precPtr.asFunction<int Function(mpf_srcptr)>();

  int __gmpf_get_si(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_get_si(
      arg0,
    );
  }

  late final ___gmpf_get_siPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(mpf_srcptr)>>(
          '__gmpf_get_si');
  late final ___gmpf_get_si =
      ___gmpf_get_siPtr.asFunction<int Function(mpf_srcptr)>();

  ffi.Pointer<ffi.Utf8> __gmpf_get_str(
    ffi.Pointer<ffi.Utf8> arg0,
    ffi.Pointer<mp_exp_t> arg1,
    int arg2,
    int arg3,
    mpf_srcptr arg4,
  ) {
    return ___gmpf_get_str(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpf_get_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Utf8> Function(
              ffi.Pointer<ffi.Utf8>,
              ffi.Pointer<mp_exp_t>,
              ffi.Int,
              ffi.Size,
              mpf_srcptr)>>('__gmpf_get_str');
  late final ___gmpf_get_str = ___gmpf_get_strPtr.asFunction<
      ffi.Pointer<ffi.Utf8> Function(ffi.Pointer<ffi.Utf8>,
          ffi.Pointer<mp_exp_t>, int, int, mpf_srcptr)>();

  int __gmpf_get_ui(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_get_ui(
      arg0,
    );
  }

  late final ___gmpf_get_uiPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(mpf_srcptr)>>(
          '__gmpf_get_ui');
  late final ___gmpf_get_ui =
      ___gmpf_get_uiPtr.asFunction<int Function(mpf_srcptr)>();

  void __gmpf_init(
    mpf_ptr arg0,
  ) {
    return ___gmpf_init(
      arg0,
    );
  }

  late final ___gmpf_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr)>>('__gmpf_init');
  late final ___gmpf_init =
      ___gmpf_initPtr.asFunction<void Function(mpf_ptr)>();

  void __gmpf_init2(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_init2(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_init2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mp_bitcnt_t)>>(
          '__gmpf_init2');
  late final ___gmpf_init2 =
      ___gmpf_init2Ptr.asFunction<void Function(mpf_ptr, int)>();

  void __gmpf_inits(
    mpf_ptr arg0,
  ) {
    return ___gmpf_inits(
      arg0,
    );
  }

  late final ___gmpf_initsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr)>>('__gmpf_inits');
  late final ___gmpf_inits =
      ___gmpf_initsPtr.asFunction<void Function(mpf_ptr)>();

  void __gmpf_init_set(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_init_set(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_init_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_init_set');
  late final ___gmpf_init_set =
      ___gmpf_init_setPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  void __gmpf_init_set_d(
    mpf_ptr arg0,
    double arg1,
  ) {
    return ___gmpf_init_set_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_init_set_dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, ffi.Double)>>(
          '__gmpf_init_set_d');
  late final ___gmpf_init_set_d =
      ___gmpf_init_set_dPtr.asFunction<void Function(mpf_ptr, double)>();

  void __gmpf_init_set_si(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_init_set_si(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_init_set_siPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, ffi.Long)>>(
          '__gmpf_init_set_si');
  late final ___gmpf_init_set_si =
      ___gmpf_init_set_siPtr.asFunction<void Function(mpf_ptr, int)>();

  int __gmpf_init_set_str(
    mpf_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    int arg2,
  ) {
    return ___gmpf_init_set_str(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_init_set_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpf_ptr, ffi.Pointer<ffi.Utf8>, ffi.Int)>>('__gmpf_init_set_str');
  late final ___gmpf_init_set_str = ___gmpf_init_set_strPtr
      .asFunction<int Function(mpf_ptr, ffi.Pointer<ffi.Utf8>, int)>();

  void __gmpf_init_set_ui(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_init_set_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_init_set_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, ffi.UnsignedLong)>>(
          '__gmpf_init_set_ui');
  late final ___gmpf_init_set_ui =
      ___gmpf_init_set_uiPtr.asFunction<void Function(mpf_ptr, int)>();

  int __gmpf_integer_p(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_integer_p(
      arg0,
    );
  }

  late final ___gmpf_integer_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpf_srcptr)>>(
          '__gmpf_integer_p');
  late final ___gmpf_integer_p =
      ___gmpf_integer_pPtr.asFunction<int Function(mpf_srcptr)>();

  void __gmpf_mul(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    mpf_srcptr arg2,
  ) {
    return ___gmpf_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>>('__gmpf_mul');
  late final ___gmpf_mul = ___gmpf_mulPtr
      .asFunction<void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>();

  void __gmpf_mul_2exp(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_mul_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_mul_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr, mp_bitcnt_t)>>(
      '__gmpf_mul_2exp');
  late final ___gmpf_mul_2exp =
      ___gmpf_mul_2expPtr.asFunction<void Function(mpf_ptr, mpf_srcptr, int)>();

  void __gmpf_mul_ui(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_mul_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_mul_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, mpf_srcptr, ffi.UnsignedLong)>>('__gmpf_mul_ui');
  late final ___gmpf_mul_ui =
      ___gmpf_mul_uiPtr.asFunction<void Function(mpf_ptr, mpf_srcptr, int)>();

  void __gmpf_neg(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_neg(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_negPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_neg');
  late final ___gmpf_neg =
      ___gmpf_negPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  void __gmpf_pow_ui(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_pow_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_pow_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, mpf_srcptr, ffi.UnsignedLong)>>('__gmpf_pow_ui');
  late final ___gmpf_pow_ui =
      ___gmpf_pow_uiPtr.asFunction<void Function(mpf_ptr, mpf_srcptr, int)>();

  void __gmpf_random2(
    mpf_ptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpf_random2(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_random2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mpf_ptr, mp_size_t, mp_exp_t)>>(
      '__gmpf_random2');
  late final ___gmpf_random2 =
      ___gmpf_random2Ptr.asFunction<void Function(mpf_ptr, int, int)>();

  void __gmpf_reldiff(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    mpf_srcptr arg2,
  ) {
    return ___gmpf_reldiff(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_reldiffPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>>(
      '__gmpf_reldiff');
  late final ___gmpf_reldiff = ___gmpf_reldiffPtr
      .asFunction<void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>();

  void __gmpf_set(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_set(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_set');
  late final ___gmpf_set =
      ___gmpf_setPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  void __gmpf_set_d(
    mpf_ptr arg0,
    double arg1,
  ) {
    return ___gmpf_set_d(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_set_dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, ffi.Double)>>(
          '__gmpf_set_d');
  late final ___gmpf_set_d =
      ___gmpf_set_dPtr.asFunction<void Function(mpf_ptr, double)>();

  void __gmpf_set_default_prec(
    int arg0,
  ) {
    return ___gmpf_set_default_prec(
      arg0,
    );
  }

  late final ___gmpf_set_default_precPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mp_bitcnt_t)>>(
          '__gmpf_set_default_prec');
  late final ___gmpf_set_default_prec =
      ___gmpf_set_default_precPtr.asFunction<void Function(int)>();

  void __gmpf_set_prec(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_set_prec(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_set_precPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mp_bitcnt_t)>>(
          '__gmpf_set_prec');
  late final ___gmpf_set_prec =
      ___gmpf_set_precPtr.asFunction<void Function(mpf_ptr, int)>();

  void __gmpf_set_prec_raw(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_set_prec_raw(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_set_prec_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mp_bitcnt_t)>>(
          '__gmpf_set_prec_raw');
  late final ___gmpf_set_prec_raw =
      ___gmpf_set_prec_rawPtr.asFunction<void Function(mpf_ptr, int)>();

  void __gmpf_set_q(
    mpf_ptr arg0,
    mpq_srcptr arg1,
  ) {
    return ___gmpf_set_q(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_set_qPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpq_srcptr)>>(
          '__gmpf_set_q');
  late final ___gmpf_set_q =
      ___gmpf_set_qPtr.asFunction<void Function(mpf_ptr, mpq_srcptr)>();

  void __gmpf_set_si(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_set_si(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_set_siPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, ffi.Long)>>(
          '__gmpf_set_si');
  late final ___gmpf_set_si =
      ___gmpf_set_siPtr.asFunction<void Function(mpf_ptr, int)>();

  int __gmpf_set_str(
    mpf_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    int arg2,
  ) {
    return ___gmpf_set_str(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_set_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpf_ptr, ffi.Pointer<ffi.Utf8>, ffi.Int)>>('__gmpf_set_str');
  late final ___gmpf_set_str = ___gmpf_set_strPtr
      .asFunction<int Function(mpf_ptr, ffi.Pointer<ffi.Utf8>, int)>();

  void __gmpf_set_ui(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_set_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_set_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, ffi.UnsignedLong)>>(
          '__gmpf_set_ui');
  late final ___gmpf_set_ui =
      ___gmpf_set_uiPtr.asFunction<void Function(mpf_ptr, int)>();

  void __gmpf_set_z(
    mpf_ptr arg0,
    mpz_srcptr arg1,
  ) {
    return ___gmpf_set_z(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_set_zPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpz_srcptr)>>(
          '__gmpf_set_z');
  late final ___gmpf_set_z =
      ___gmpf_set_zPtr.asFunction<void Function(mpf_ptr, mpz_srcptr)>();

  int __gmpf_size(
    mpf_srcptr arg0,
  ) {
    return ___gmpf_size(
      arg0,
    );
  }

  late final ___gmpf_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(mpf_srcptr)>>('__gmpf_size');
  late final ___gmpf_size =
      ___gmpf_sizePtr.asFunction<int Function(mpf_srcptr)>();

  void __gmpf_sqrt(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_sqrt(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_sqrt');
  late final ___gmpf_sqrt =
      ___gmpf_sqrtPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  void __gmpf_sqrt_ui(
    mpf_ptr arg0,
    int arg1,
  ) {
    return ___gmpf_sqrt_ui(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_sqrt_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, ffi.UnsignedLong)>>(
          '__gmpf_sqrt_ui');
  late final ___gmpf_sqrt_ui =
      ___gmpf_sqrt_uiPtr.asFunction<void Function(mpf_ptr, int)>();

  void __gmpf_sub(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    mpf_srcptr arg2,
  ) {
    return ___gmpf_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>>('__gmpf_sub');
  late final ___gmpf_sub = ___gmpf_subPtr
      .asFunction<void Function(mpf_ptr, mpf_srcptr, mpf_srcptr)>();

  void __gmpf_sub_ui(
    mpf_ptr arg0,
    mpf_srcptr arg1,
    int arg2,
  ) {
    return ___gmpf_sub_ui(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_sub_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, mpf_srcptr, ffi.UnsignedLong)>>('__gmpf_sub_ui');
  late final ___gmpf_sub_ui =
      ___gmpf_sub_uiPtr.asFunction<void Function(mpf_ptr, mpf_srcptr, int)>();

  void __gmpf_swap(
    mpf_ptr arg0,
    mpf_ptr arg1,
  ) {
    return ___gmpf_swap(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_ptr)>>(
          '__gmpf_swap');
  late final ___gmpf_swap =
      ___gmpf_swapPtr.asFunction<void Function(mpf_ptr, mpf_ptr)>();

  void __gmpf_trunc(
    mpf_ptr arg0,
    mpf_srcptr arg1,
  ) {
    return ___gmpf_trunc(
      arg0,
      arg1,
    );
  }

  late final ___gmpf_truncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpf_ptr, mpf_srcptr)>>(
          '__gmpf_trunc');
  late final ___gmpf_trunc =
      ___gmpf_truncPtr.asFunction<void Function(mpf_ptr, mpf_srcptr)>();

  void __gmpf_ui_div(
    mpf_ptr arg0,
    int arg1,
    mpf_srcptr arg2,
  ) {
    return ___gmpf_ui_div(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_ui_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, ffi.UnsignedLong, mpf_srcptr)>>('__gmpf_ui_div');
  late final ___gmpf_ui_div =
      ___gmpf_ui_divPtr.asFunction<void Function(mpf_ptr, int, mpf_srcptr)>();

  void __gmpf_ui_sub(
    mpf_ptr arg0,
    int arg1,
    mpf_srcptr arg2,
  ) {
    return ___gmpf_ui_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_ui_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, ffi.UnsignedLong, mpf_srcptr)>>('__gmpf_ui_sub');
  late final ___gmpf_ui_sub =
      ___gmpf_ui_subPtr.asFunction<void Function(mpf_ptr, int, mpf_srcptr)>();

  void __gmpf_urandomb(
    mpf_ptr arg0,
    gmp_randstate_ptr arg1,
    int arg2,
  ) {
    return ___gmpf_urandomb(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpf_urandombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpf_ptr, gmp_randstate_ptr, mp_bitcnt_t)>>('__gmpf_urandomb');
  late final ___gmpf_urandomb = ___gmpf_urandombPtr
      .asFunction<void Function(mpf_ptr, gmp_randstate_ptr, int)>();

  int __gmpn_add(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    mp_srcptr arg3,
    int arg4,
  ) {
    return ___gmpn_add(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_addPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,
              mp_size_t)>>('__gmpn_add');
  late final ___gmpn_add = ___gmpn_addPtr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, mp_srcptr, int)>();

  int __gmpn_add_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_add_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_add_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_add_1');
  late final ___gmpn_add_1 =
      ___gmpn_add_1Ptr.asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  int __gmpn_add_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_add_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_add_nPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_add_n');
  late final ___gmpn_add_n = ___gmpn_add_nPtr
      .asFunction<int Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  int __gmpn_addmul_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_addmul_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_addmul_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_addmul_1');
  late final ___gmpn_addmul_1 = ___gmpn_addmul_1Ptr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  int __gmpn_cmp(
    mp_srcptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpn_cmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_cmp');
  late final ___gmpn_cmp =
      ___gmpn_cmpPtr.asFunction<int Function(mp_srcptr, mp_srcptr, int)>();

  int __gmpn_zero_p(
    mp_srcptr arg0,
    int arg1,
  ) {
    return ___gmpn_zero_p(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_zero_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mp_srcptr, mp_size_t)>>(
          '__gmpn_zero_p');
  late final ___gmpn_zero_p =
      ___gmpn_zero_pPtr.asFunction<int Function(mp_srcptr, int)>();

  void __gmpn_divexact_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_divexact_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_divexact_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_divexact_1');
  late final ___gmpn_divexact_1 = ___gmpn_divexact_1Ptr
      .asFunction<void Function(mp_ptr, mp_srcptr, int, int)>();

  int __gmpn_divexact_by3c(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_divexact_by3c(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_divexact_by3cPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_srcptr, mp_size_t,
              mp_limb_t)>>('__gmpn_divexact_by3c');
  late final ___gmpn_divexact_by3c = ___gmpn_divexact_by3cPtr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  int __gmpn_divrem(
    mp_ptr arg0,
    int arg1,
    mp_ptr arg2,
    int arg3,
    mp_srcptr arg4,
    int arg5,
  ) {
    return ___gmpn_divrem(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___gmpn_divremPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr,
              mp_size_t)>>('__gmpn_divrem');
  late final ___gmpn_divrem = ___gmpn_divremPtr
      .asFunction<int Function(mp_ptr, int, mp_ptr, int, mp_srcptr, int)>();

  int __gmpn_divrem_1(
    mp_ptr arg0,
    int arg1,
    mp_srcptr arg2,
    int arg3,
    int arg4,
  ) {
    return ___gmpn_divrem_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_divrem_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_size_t, mp_srcptr, mp_size_t,
              mp_limb_t)>>('__gmpn_divrem_1');
  late final ___gmpn_divrem_1 = ___gmpn_divrem_1Ptr
      .asFunction<int Function(mp_ptr, int, mp_srcptr, int, int)>();

  int __gmpn_divrem_2(
    mp_ptr arg0,
    int arg1,
    mp_ptr arg2,
    int arg3,
    mp_srcptr arg4,
  ) {
    return ___gmpn_divrem_2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_divrem_2Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_size_t, mp_ptr, mp_size_t,
              mp_srcptr)>>('__gmpn_divrem_2');
  late final ___gmpn_divrem_2 = ___gmpn_divrem_2Ptr
      .asFunction<int Function(mp_ptr, int, mp_ptr, int, mp_srcptr)>();

  int __gmpn_div_qr_1(
    mp_ptr arg0,
    ffi.Pointer<mp_limb_t> arg1,
    mp_srcptr arg2,
    int arg3,
    int arg4,
  ) {
    return ___gmpn_div_qr_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_div_qr_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, ffi.Pointer<mp_limb_t>, mp_srcptr,
              mp_size_t, mp_limb_t)>>('__gmpn_div_qr_1');
  late final ___gmpn_div_qr_1 = ___gmpn_div_qr_1Ptr.asFunction<
      int Function(mp_ptr, ffi.Pointer<mp_limb_t>, mp_srcptr, int, int)>();

  int __gmpn_div_qr_2(
    mp_ptr arg0,
    mp_ptr arg1,
    mp_srcptr arg2,
    int arg3,
    mp_srcptr arg4,
  ) {
    return ___gmpn_div_qr_2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_div_qr_2Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_ptr, mp_srcptr, mp_size_t,
              mp_srcptr)>>('__gmpn_div_qr_2');
  late final ___gmpn_div_qr_2 = ___gmpn_div_qr_2Ptr
      .asFunction<int Function(mp_ptr, mp_ptr, mp_srcptr, int, mp_srcptr)>();

  int __gmpn_gcd(
    mp_ptr arg0,
    mp_ptr arg1,
    int arg2,
    mp_ptr arg3,
    int arg4,
  ) {
    return ___gmpn_gcd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_gcdPtr = _lookup<
      ffi.NativeFunction<
          mp_size_t Function(
              mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t)>>('__gmpn_gcd');
  late final ___gmpn_gcd = ___gmpn_gcdPtr
      .asFunction<int Function(mp_ptr, mp_ptr, int, mp_ptr, int)>();

  int __gmpn_gcd_11(
    int arg0,
    int arg1,
  ) {
    return ___gmpn_gcd_11(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_gcd_11Ptr =
      _lookup<ffi.NativeFunction<mp_limb_t Function(mp_limb_t, mp_limb_t)>>(
          '__gmpn_gcd_11');
  late final ___gmpn_gcd_11 =
      ___gmpn_gcd_11Ptr.asFunction<int Function(int, int)>();

  int __gmpn_gcd_1(
    mp_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpn_gcd_1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_gcd_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_gcd_1');
  late final ___gmpn_gcd_1 =
      ___gmpn_gcd_1Ptr.asFunction<int Function(mp_srcptr, int, int)>();

  int __gmpn_gcdext_1(
    ffi.Pointer<mp_limb_signed_t> arg0,
    ffi.Pointer<mp_limb_signed_t> arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_gcdext_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_gcdext_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              ffi.Pointer<mp_limb_signed_t>,
              ffi.Pointer<mp_limb_signed_t>,
              mp_limb_t,
              mp_limb_t)>>('__gmpn_gcdext_1');
  late final ___gmpn_gcdext_1 = ___gmpn_gcdext_1Ptr.asFunction<
      int Function(ffi.Pointer<mp_limb_signed_t>, ffi.Pointer<mp_limb_signed_t>,
          int, int)>();

  int __gmpn_gcdext(
    mp_ptr arg0,
    mp_ptr arg1,
    ffi.Pointer<mp_size_t> arg2,
    mp_ptr arg3,
    int arg4,
    mp_ptr arg5,
    int arg6,
  ) {
    return ___gmpn_gcdext(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final ___gmpn_gcdextPtr = _lookup<
      ffi.NativeFunction<
          mp_size_t Function(mp_ptr, mp_ptr, ffi.Pointer<mp_size_t>, mp_ptr,
              mp_size_t, mp_ptr, mp_size_t)>>('__gmpn_gcdext');
  late final ___gmpn_gcdext = ___gmpn_gcdextPtr.asFunction<
      int Function(
          mp_ptr, mp_ptr, ffi.Pointer<mp_size_t>, mp_ptr, int, mp_ptr, int)>();

  int __gmpn_get_str(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
    mp_ptr arg2,
    int arg3,
  ) {
    return ___gmpn_get_str(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_get_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int, mp_ptr,
              mp_size_t)>>('__gmpn_get_str');
  late final ___gmpn_get_str = ___gmpn_get_strPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, mp_ptr, int)>();

  int __gmpn_hamdist(
    mp_srcptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpn_hamdist(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_hamdistPtr = _lookup<
      ffi.NativeFunction<
          mp_bitcnt_t Function(
              mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_hamdist');
  late final ___gmpn_hamdist =
      ___gmpn_hamdistPtr.asFunction<int Function(mp_srcptr, mp_srcptr, int)>();

  int __gmpn_lshift(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_lshift(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_lshiftPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_size_t, ffi.UnsignedInt)>>('__gmpn_lshift');
  late final ___gmpn_lshift =
      ___gmpn_lshiftPtr.asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  int __gmpn_mod_1(
    mp_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpn_mod_1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_mod_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_mod_1');
  late final ___gmpn_mod_1 =
      ___gmpn_mod_1Ptr.asFunction<int Function(mp_srcptr, int, int)>();

  int __gmpn_mul(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    mp_srcptr arg3,
    int arg4,
  ) {
    return ___gmpn_mul(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_mulPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,
              mp_size_t)>>('__gmpn_mul');
  late final ___gmpn_mul = ___gmpn_mulPtr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, mp_srcptr, int)>();

  int __gmpn_mul_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_mul_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_mul_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_mul_1');
  late final ___gmpn_mul_1 =
      ___gmpn_mul_1Ptr.asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  void __gmpn_mul_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_mul_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_mul_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_mul_n');
  late final ___gmpn_mul_n = ___gmpn_mul_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_sqr(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpn_sqr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_sqrPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mp_ptr, mp_srcptr, mp_size_t)>>(
      '__gmpn_sqr');
  late final ___gmpn_sqr =
      ___gmpn_sqrPtr.asFunction<void Function(mp_ptr, mp_srcptr, int)>();

  int __gmpn_neg(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpn_neg(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_negPtr = _lookup<
          ffi.NativeFunction<mp_limb_t Function(mp_ptr, mp_srcptr, mp_size_t)>>(
      '__gmpn_neg');
  late final ___gmpn_neg =
      ___gmpn_negPtr.asFunction<int Function(mp_ptr, mp_srcptr, int)>();

  void __gmpn_com(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpn_com(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_comPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mp_ptr, mp_srcptr, mp_size_t)>>(
      '__gmpn_com');
  late final ___gmpn_com =
      ___gmpn_comPtr.asFunction<void Function(mp_ptr, mp_srcptr, int)>();

  int __gmpn_perfect_square_p(
    mp_srcptr arg0,
    int arg1,
  ) {
    return ___gmpn_perfect_square_p(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_perfect_square_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mp_srcptr, mp_size_t)>>(
          '__gmpn_perfect_square_p');
  late final ___gmpn_perfect_square_p =
      ___gmpn_perfect_square_pPtr.asFunction<int Function(mp_srcptr, int)>();

  int __gmpn_perfect_power_p(
    mp_srcptr arg0,
    int arg1,
  ) {
    return ___gmpn_perfect_power_p(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_perfect_power_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mp_srcptr, mp_size_t)>>(
          '__gmpn_perfect_power_p');
  late final ___gmpn_perfect_power_p =
      ___gmpn_perfect_power_pPtr.asFunction<int Function(mp_srcptr, int)>();

  int __gmpn_popcount(
    mp_srcptr arg0,
    int arg1,
  ) {
    return ___gmpn_popcount(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_popcountPtr =
      _lookup<ffi.NativeFunction<mp_bitcnt_t Function(mp_srcptr, mp_size_t)>>(
          '__gmpn_popcount');
  late final ___gmpn_popcount =
      ___gmpn_popcountPtr.asFunction<int Function(mp_srcptr, int)>();

  int __gmpn_pow_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
    mp_ptr arg4,
  ) {
    return ___gmpn_pow_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_pow_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_size_t Function(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t,
              mp_ptr)>>('__gmpn_pow_1');
  late final ___gmpn_pow_1 = ___gmpn_pow_1Ptr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, int, mp_ptr)>();

  int __gmpn_preinv_mod_1(
    mp_srcptr arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_preinv_mod_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_preinv_mod_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_srcptr, mp_size_t, mp_limb_t,
              mp_limb_t)>>('__gmpn_preinv_mod_1');
  late final ___gmpn_preinv_mod_1 = ___gmpn_preinv_mod_1Ptr
      .asFunction<int Function(mp_srcptr, int, int, int)>();

  void __gmpn_random(
    mp_ptr arg0,
    int arg1,
  ) {
    return ___gmpn_random(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_randomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mp_ptr, mp_size_t)>>(
          '__gmpn_random');
  late final ___gmpn_random =
      ___gmpn_randomPtr.asFunction<void Function(mp_ptr, int)>();

  void __gmpn_random2(
    mp_ptr arg0,
    int arg1,
  ) {
    return ___gmpn_random2(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_random2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mp_ptr, mp_size_t)>>(
          '__gmpn_random2');
  late final ___gmpn_random2 =
      ___gmpn_random2Ptr.asFunction<void Function(mp_ptr, int)>();

  int __gmpn_rshift(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_rshift(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_rshiftPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_size_t, ffi.UnsignedInt)>>('__gmpn_rshift');
  late final ___gmpn_rshift =
      ___gmpn_rshiftPtr.asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  int __gmpn_scan0(
    mp_srcptr arg0,
    int arg1,
  ) {
    return ___gmpn_scan0(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_scan0Ptr =
      _lookup<ffi.NativeFunction<mp_bitcnt_t Function(mp_srcptr, mp_bitcnt_t)>>(
          '__gmpn_scan0');
  late final ___gmpn_scan0 =
      ___gmpn_scan0Ptr.asFunction<int Function(mp_srcptr, int)>();

  int __gmpn_scan1(
    mp_srcptr arg0,
    int arg1,
  ) {
    return ___gmpn_scan1(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_scan1Ptr =
      _lookup<ffi.NativeFunction<mp_bitcnt_t Function(mp_srcptr, mp_bitcnt_t)>>(
          '__gmpn_scan1');
  late final ___gmpn_scan1 =
      ___gmpn_scan1Ptr.asFunction<int Function(mp_srcptr, int)>();

  int __gmpn_set_str(
    mp_ptr arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_set_str(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_set_strPtr = _lookup<
      ffi.NativeFunction<
          mp_size_t Function(mp_ptr, ffi.Pointer<ffi.UnsignedChar>, ffi.Size,
              ffi.Int)>>('__gmpn_set_str');
  late final ___gmpn_set_str = ___gmpn_set_strPtr.asFunction<
      int Function(mp_ptr, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int __gmpn_sizeinbase(
    mp_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpn_sizeinbase(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_sizeinbasePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(mp_srcptr, mp_size_t, ffi.Int)>>(
      '__gmpn_sizeinbase');
  late final ___gmpn_sizeinbase =
      ___gmpn_sizeinbasePtr.asFunction<int Function(mp_srcptr, int, int)>();

  int __gmpn_sqrtrem(
    mp_ptr arg0,
    mp_ptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_sqrtrem(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_sqrtremPtr = _lookup<
      ffi.NativeFunction<
          mp_size_t Function(
              mp_ptr, mp_ptr, mp_srcptr, mp_size_t)>>('__gmpn_sqrtrem');
  late final ___gmpn_sqrtrem = ___gmpn_sqrtremPtr
      .asFunction<int Function(mp_ptr, mp_ptr, mp_srcptr, int)>();

  int __gmpn_sub(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    mp_srcptr arg3,
    int arg4,
  ) {
    return ___gmpn_sub(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_subPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,
              mp_size_t)>>('__gmpn_sub');
  late final ___gmpn_sub = ___gmpn_subPtr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, mp_srcptr, int)>();

  int __gmpn_sub_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_sub_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_sub_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_sub_1');
  late final ___gmpn_sub_1 =
      ___gmpn_sub_1Ptr.asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  int __gmpn_sub_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_sub_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_sub_nPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_sub_n');
  late final ___gmpn_sub_n = ___gmpn_sub_nPtr
      .asFunction<int Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  int __gmpn_submul_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
  ) {
    return ___gmpn_submul_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_submul_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(
              mp_ptr, mp_srcptr, mp_size_t, mp_limb_t)>>('__gmpn_submul_1');
  late final ___gmpn_submul_1 = ___gmpn_submul_1Ptr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, int)>();

  void __gmpn_tdiv_qr(
    mp_ptr arg0,
    mp_ptr arg1,
    int arg2,
    mp_srcptr arg3,
    int arg4,
    mp_srcptr arg5,
    int arg6,
  ) {
    return ___gmpn_tdiv_qr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final ___gmpn_tdiv_qrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t,
              mp_srcptr, mp_size_t)>>('__gmpn_tdiv_qr');
  late final ___gmpn_tdiv_qr = ___gmpn_tdiv_qrPtr.asFunction<
      void Function(mp_ptr, mp_ptr, int, mp_srcptr, int, mp_srcptr, int)>();

  void __gmpn_and_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_and_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_and_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_and_n');
  late final ___gmpn_and_n = ___gmpn_and_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_andn_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_andn_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_andn_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_andn_n');
  late final ___gmpn_andn_n = ___gmpn_andn_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_nand_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_nand_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_nand_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_nand_n');
  late final ___gmpn_nand_n = ___gmpn_nand_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_ior_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_ior_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_ior_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_ior_n');
  late final ___gmpn_ior_n = ___gmpn_ior_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_iorn_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_iorn_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_iorn_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_iorn_n');
  late final ___gmpn_iorn_n = ___gmpn_iorn_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_nior_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_nior_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_nior_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_nior_n');
  late final ___gmpn_nior_n = ___gmpn_nior_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_xor_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_xor_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_xor_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_xor_n');
  late final ___gmpn_xor_n = ___gmpn_xor_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_xnor_n(
    mp_ptr arg0,
    mp_srcptr arg1,
    mp_srcptr arg2,
    int arg3,
  ) {
    return ___gmpn_xnor_n(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_xnor_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_srcptr, mp_size_t)>>('__gmpn_xnor_n');
  late final ___gmpn_xnor_n = ___gmpn_xnor_nPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, mp_srcptr, int)>();

  void __gmpn_copyi(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpn_copyi(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_copyiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mp_ptr, mp_srcptr, mp_size_t)>>(
      '__gmpn_copyi');
  late final ___gmpn_copyi =
      ___gmpn_copyiPtr.asFunction<void Function(mp_ptr, mp_srcptr, int)>();

  void __gmpn_copyd(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
  ) {
    return ___gmpn_copyd(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_copydPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mp_ptr, mp_srcptr, mp_size_t)>>(
      '__gmpn_copyd');
  late final ___gmpn_copyd =
      ___gmpn_copydPtr.asFunction<void Function(mp_ptr, mp_srcptr, int)>();

  void __gmpn_zero(
    mp_ptr arg0,
    int arg1,
  ) {
    return ___gmpn_zero(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mp_ptr, mp_size_t)>>(
          '__gmpn_zero');
  late final ___gmpn_zero =
      ___gmpn_zeroPtr.asFunction<void Function(mp_ptr, int)>();

  int __gmpn_cnd_add_n(
    int arg0,
    mp_ptr arg1,
    mp_srcptr arg2,
    mp_srcptr arg3,
    int arg4,
  ) {
    return ___gmpn_cnd_add_n(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_cnd_add_nPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr,
              mp_size_t)>>('__gmpn_cnd_add_n');
  late final ___gmpn_cnd_add_n = ___gmpn_cnd_add_nPtr
      .asFunction<int Function(int, mp_ptr, mp_srcptr, mp_srcptr, int)>();

  int __gmpn_cnd_sub_n(
    int arg0,
    mp_ptr arg1,
    mp_srcptr arg2,
    mp_srcptr arg3,
    int arg4,
  ) {
    return ___gmpn_cnd_sub_n(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_cnd_sub_nPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr,
              mp_size_t)>>('__gmpn_cnd_sub_n');
  late final ___gmpn_cnd_sub_n = ___gmpn_cnd_sub_nPtr
      .asFunction<int Function(int, mp_ptr, mp_srcptr, mp_srcptr, int)>();

  int __gmpn_sec_add_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
    mp_ptr arg4,
  ) {
    return ___gmpn_sec_add_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_sec_add_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t,
              mp_ptr)>>('__gmpn_sec_add_1');
  late final ___gmpn_sec_add_1 = ___gmpn_sec_add_1Ptr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, int, mp_ptr)>();

  int __gmpn_sec_add_1_itch(
    int arg0,
  ) {
    return ___gmpn_sec_add_1_itch(
      arg0,
    );
  }

  late final ___gmpn_sec_add_1_itchPtr =
      _lookup<ffi.NativeFunction<mp_size_t Function(mp_size_t)>>(
          '__gmpn_sec_add_1_itch');
  late final ___gmpn_sec_add_1_itch =
      ___gmpn_sec_add_1_itchPtr.asFunction<int Function(int)>();

  int __gmpn_sec_sub_1(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    int arg3,
    mp_ptr arg4,
  ) {
    return ___gmpn_sec_sub_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_sec_sub_1Ptr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t,
              mp_ptr)>>('__gmpn_sec_sub_1');
  late final ___gmpn_sec_sub_1 = ___gmpn_sec_sub_1Ptr
      .asFunction<int Function(mp_ptr, mp_srcptr, int, int, mp_ptr)>();

  int __gmpn_sec_sub_1_itch(
    int arg0,
  ) {
    return ___gmpn_sec_sub_1_itch(
      arg0,
    );
  }

  late final ___gmpn_sec_sub_1_itchPtr =
      _lookup<ffi.NativeFunction<mp_size_t Function(mp_size_t)>>(
          '__gmpn_sec_sub_1_itch');
  late final ___gmpn_sec_sub_1_itch =
      ___gmpn_sec_sub_1_itchPtr.asFunction<int Function(int)>();

  void __gmpn_cnd_swap(
    int arg0,
    ffi.Pointer<mp_limb_t> arg1,
    ffi.Pointer<mp_limb_t> arg2,
    int arg3,
  ) {
    return ___gmpn_cnd_swap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_cnd_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mp_limb_t, ffi.Pointer<mp_limb_t>,
              ffi.Pointer<mp_limb_t>, mp_size_t)>>('__gmpn_cnd_swap');
  late final ___gmpn_cnd_swap = ___gmpn_cnd_swapPtr.asFunction<
      void Function(
          int, ffi.Pointer<mp_limb_t>, ffi.Pointer<mp_limb_t>, int)>();

  void __gmpn_sec_mul(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    mp_srcptr arg3,
    int arg4,
    mp_ptr arg5,
  ) {
    return ___gmpn_sec_mul(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___gmpn_sec_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t,
              mp_ptr)>>('__gmpn_sec_mul');
  late final ___gmpn_sec_mul = ___gmpn_sec_mulPtr.asFunction<
      void Function(mp_ptr, mp_srcptr, int, mp_srcptr, int, mp_ptr)>();

  int __gmpn_sec_mul_itch(
    int arg0,
    int arg1,
  ) {
    return ___gmpn_sec_mul_itch(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_sec_mul_itchPtr =
      _lookup<ffi.NativeFunction<mp_size_t Function(mp_size_t, mp_size_t)>>(
          '__gmpn_sec_mul_itch');
  late final ___gmpn_sec_mul_itch =
      ___gmpn_sec_mul_itchPtr.asFunction<int Function(int, int)>();

  void __gmpn_sec_sqr(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    mp_ptr arg3,
  ) {
    return ___gmpn_sec_sqr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___gmpn_sec_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mp_ptr, mp_srcptr, mp_size_t, mp_ptr)>>('__gmpn_sec_sqr');
  late final ___gmpn_sec_sqr = ___gmpn_sec_sqrPtr
      .asFunction<void Function(mp_ptr, mp_srcptr, int, mp_ptr)>();

  int __gmpn_sec_sqr_itch(
    int arg0,
  ) {
    return ___gmpn_sec_sqr_itch(
      arg0,
    );
  }

  late final ___gmpn_sec_sqr_itchPtr =
      _lookup<ffi.NativeFunction<mp_size_t Function(mp_size_t)>>(
          '__gmpn_sec_sqr_itch');
  late final ___gmpn_sec_sqr_itch =
      ___gmpn_sec_sqr_itchPtr.asFunction<int Function(int)>();

  void __gmpn_sec_powm(
    mp_ptr arg0,
    mp_srcptr arg1,
    int arg2,
    mp_srcptr arg3,
    int arg4,
    mp_srcptr arg5,
    int arg6,
    mp_ptr arg7,
  ) {
    return ___gmpn_sec_powm(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final ___gmpn_sec_powmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,
              mp_bitcnt_t, mp_srcptr, mp_size_t, mp_ptr)>>('__gmpn_sec_powm');
  late final ___gmpn_sec_powm = ___gmpn_sec_powmPtr.asFunction<
      void Function(
          mp_ptr, mp_srcptr, int, mp_srcptr, int, mp_srcptr, int, mp_ptr)>();

  int __gmpn_sec_powm_itch(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return ___gmpn_sec_powm_itch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___gmpn_sec_powm_itchPtr = _lookup<
      ffi.NativeFunction<
          mp_size_t Function(
              mp_size_t, mp_bitcnt_t, mp_size_t)>>('__gmpn_sec_powm_itch');
  late final ___gmpn_sec_powm_itch =
      ___gmpn_sec_powm_itchPtr.asFunction<int Function(int, int, int)>();

  void __gmpn_sec_tabselect(
    ffi.Pointer<mp_limb_t> arg0,
    ffi.Pointer<mp_limb_t> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return ___gmpn_sec_tabselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_sec_tabselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mp_limb_t>, ffi.Pointer<mp_limb_t>,
              mp_size_t, mp_size_t, mp_size_t)>>('__gmpn_sec_tabselect');
  late final ___gmpn_sec_tabselect = ___gmpn_sec_tabselectPtr.asFunction<
      void Function(
          ffi.Pointer<mp_limb_t>, ffi.Pointer<mp_limb_t>, int, int, int)>();

  int __gmpn_sec_div_qr(
    mp_ptr arg0,
    mp_ptr arg1,
    int arg2,
    mp_srcptr arg3,
    int arg4,
    mp_ptr arg5,
  ) {
    return ___gmpn_sec_div_qr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___gmpn_sec_div_qrPtr = _lookup<
      ffi.NativeFunction<
          mp_limb_t Function(mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t,
              mp_ptr)>>('__gmpn_sec_div_qr');
  late final ___gmpn_sec_div_qr = ___gmpn_sec_div_qrPtr
      .asFunction<int Function(mp_ptr, mp_ptr, int, mp_srcptr, int, mp_ptr)>();

  int __gmpn_sec_div_qr_itch(
    int arg0,
    int arg1,
  ) {
    return ___gmpn_sec_div_qr_itch(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_sec_div_qr_itchPtr =
      _lookup<ffi.NativeFunction<mp_size_t Function(mp_size_t, mp_size_t)>>(
          '__gmpn_sec_div_qr_itch');
  late final ___gmpn_sec_div_qr_itch =
      ___gmpn_sec_div_qr_itchPtr.asFunction<int Function(int, int)>();

  void __gmpn_sec_div_r(
    mp_ptr arg0,
    int arg1,
    mp_srcptr arg2,
    int arg3,
    mp_ptr arg4,
  ) {
    return ___gmpn_sec_div_r(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___gmpn_sec_div_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mp_ptr, mp_size_t, mp_srcptr, mp_size_t,
              mp_ptr)>>('__gmpn_sec_div_r');
  late final ___gmpn_sec_div_r = ___gmpn_sec_div_rPtr
      .asFunction<void Function(mp_ptr, int, mp_srcptr, int, mp_ptr)>();

  int __gmpn_sec_div_r_itch(
    int arg0,
    int arg1,
  ) {
    return ___gmpn_sec_div_r_itch(
      arg0,
      arg1,
    );
  }

  late final ___gmpn_sec_div_r_itchPtr =
      _lookup<ffi.NativeFunction<mp_size_t Function(mp_size_t, mp_size_t)>>(
          '__gmpn_sec_div_r_itch');
  late final ___gmpn_sec_div_r_itch =
      ___gmpn_sec_div_r_itchPtr.asFunction<int Function(int, int)>();

  int __gmpn_sec_invert(
    mp_ptr arg0,
    mp_ptr arg1,
    mp_srcptr arg2,
    int arg3,
    int arg4,
    mp_ptr arg5,
  ) {
    return ___gmpn_sec_invert(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___gmpn_sec_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_bitcnt_t,
              mp_ptr)>>('__gmpn_sec_invert');
  late final ___gmpn_sec_invert = ___gmpn_sec_invertPtr
      .asFunction<int Function(mp_ptr, mp_ptr, mp_srcptr, int, int, mp_ptr)>();

  int __gmpn_sec_invert_itch(
    int arg0,
  ) {
    return ___gmpn_sec_invert_itch(
      arg0,
    );
  }

  late final ___gmpn_sec_invert_itchPtr =
      _lookup<ffi.NativeFunction<mp_size_t Function(mp_size_t)>>(
          '__gmpn_sec_invert_itch');
  late final ___gmpn_sec_invert_itch =
      ___gmpn_sec_invert_itchPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Utf8> mpfr_get_version() {
    return _mpfr_get_version();
  }

  late final _mpfr_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Utf8> Function()>>(
          'mpfr_get_version');
  late final _mpfr_get_version =
      _mpfr_get_versionPtr.asFunction<ffi.Pointer<ffi.Utf8> Function()>();

  ffi.Pointer<ffi.Utf8> mpfr_get_patches() {
    return _mpfr_get_patches();
  }

  late final _mpfr_get_patchesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Utf8> Function()>>(
          'mpfr_get_patches');
  late final _mpfr_get_patches =
      _mpfr_get_patchesPtr.asFunction<ffi.Pointer<ffi.Utf8> Function()>();

  int mpfr_buildopt_tls_p() {
    return _mpfr_buildopt_tls_p();
  }

  late final _mpfr_buildopt_tls_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_buildopt_tls_p');
  late final _mpfr_buildopt_tls_p =
      _mpfr_buildopt_tls_pPtr.asFunction<int Function()>();

  int mpfr_buildopt_float128_p() {
    return _mpfr_buildopt_float128_p();
  }

  late final _mpfr_buildopt_float128_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'mpfr_buildopt_float128_p');
  late final _mpfr_buildopt_float128_p =
      _mpfr_buildopt_float128_pPtr.asFunction<int Function()>();

  int mpfr_buildopt_decimal_p() {
    return _mpfr_buildopt_decimal_p();
  }

  late final _mpfr_buildopt_decimal_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'mpfr_buildopt_decimal_p');
  late final _mpfr_buildopt_decimal_p =
      _mpfr_buildopt_decimal_pPtr.asFunction<int Function()>();

  int mpfr_buildopt_gmpinternals_p() {
    return _mpfr_buildopt_gmpinternals_p();
  }

  late final _mpfr_buildopt_gmpinternals_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'mpfr_buildopt_gmpinternals_p');
  late final _mpfr_buildopt_gmpinternals_p =
      _mpfr_buildopt_gmpinternals_pPtr.asFunction<int Function()>();

  int mpfr_buildopt_sharedcache_p() {
    return _mpfr_buildopt_sharedcache_p();
  }

  late final _mpfr_buildopt_sharedcache_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'mpfr_buildopt_sharedcache_p');
  late final _mpfr_buildopt_sharedcache_p =
      _mpfr_buildopt_sharedcache_pPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Utf8> mpfr_buildopt_tune_case() {
    return _mpfr_buildopt_tune_case();
  }

  late final _mpfr_buildopt_tune_casePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Utf8> Function()>>(
          'mpfr_buildopt_tune_case');
  late final _mpfr_buildopt_tune_case = _mpfr_buildopt_tune_casePtr
      .asFunction<ffi.Pointer<ffi.Utf8> Function()>();

  int mpfr_get_emin() {
    return _mpfr_get_emin();
  }

  late final _mpfr_get_eminPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function()>>('mpfr_get_emin');
  late final _mpfr_get_emin = _mpfr_get_eminPtr.asFunction<int Function()>();

  int mpfr_set_emin(
    int arg0,
  ) {
    return _mpfr_set_emin(
      arg0,
    );
  }

  late final _mpfr_set_eminPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_exp_t)>>(
          'mpfr_set_emin');
  late final _mpfr_set_emin = _mpfr_set_eminPtr.asFunction<int Function(int)>();

  int mpfr_get_emin_min() {
    return _mpfr_get_emin_min();
  }

  late final _mpfr_get_emin_minPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function()>>('mpfr_get_emin_min');
  late final _mpfr_get_emin_min =
      _mpfr_get_emin_minPtr.asFunction<int Function()>();

  int mpfr_get_emin_max() {
    return _mpfr_get_emin_max();
  }

  late final _mpfr_get_emin_maxPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function()>>('mpfr_get_emin_max');
  late final _mpfr_get_emin_max =
      _mpfr_get_emin_maxPtr.asFunction<int Function()>();

  int mpfr_get_emax() {
    return _mpfr_get_emax();
  }

  late final _mpfr_get_emaxPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function()>>('mpfr_get_emax');
  late final _mpfr_get_emax = _mpfr_get_emaxPtr.asFunction<int Function()>();

  int mpfr_set_emax(
    int arg0,
  ) {
    return _mpfr_set_emax(
      arg0,
    );
  }

  late final _mpfr_set_emaxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_exp_t)>>(
          'mpfr_set_emax');
  late final _mpfr_set_emax = _mpfr_set_emaxPtr.asFunction<int Function(int)>();

  int mpfr_get_emax_min() {
    return _mpfr_get_emax_min();
  }

  late final _mpfr_get_emax_minPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function()>>('mpfr_get_emax_min');
  late final _mpfr_get_emax_min =
      _mpfr_get_emax_minPtr.asFunction<int Function()>();

  int mpfr_get_emax_max() {
    return _mpfr_get_emax_max();
  }

  late final _mpfr_get_emax_maxPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function()>>('mpfr_get_emax_max');
  late final _mpfr_get_emax_max =
      _mpfr_get_emax_maxPtr.asFunction<int Function()>();

  void mpfr_set_default_rounding_mode(
    mpfr_rnd_t arg0,
  ) {
    return _mpfr_set_default_rounding_mode(
      arg0.value,
    );
  }

  late final _mpfr_set_default_rounding_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'mpfr_set_default_rounding_mode');
  late final _mpfr_set_default_rounding_mode =
      _mpfr_set_default_rounding_modePtr.asFunction<void Function(int)>();

  mpfr_rnd_t mpfr_get_default_rounding_mode() {
    return mpfr_rnd_t.fromValue(_mpfr_get_default_rounding_mode());
  }

  late final _mpfr_get_default_rounding_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'mpfr_get_default_rounding_mode');
  late final _mpfr_get_default_rounding_mode =
      _mpfr_get_default_rounding_modePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Utf8> mpfr_print_rnd_mode(
    mpfr_rnd_t arg0,
  ) {
    return _mpfr_print_rnd_mode(
      arg0.value,
    );
  }

  late final _mpfr_print_rnd_modePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Utf8> Function(ffi.Int)>>(
          'mpfr_print_rnd_mode');
  late final _mpfr_print_rnd_mode =
      _mpfr_print_rnd_modePtr.asFunction<ffi.Pointer<ffi.Utf8> Function(int)>();

  void mpfr_clear_flags() {
    return _mpfr_clear_flags();
  }

  late final _mpfr_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_clear_flags');
  late final _mpfr_clear_flags =
      _mpfr_clear_flagsPtr.asFunction<void Function()>();

  void mpfr_clear_underflow() {
    return _mpfr_clear_underflow();
  }

  late final _mpfr_clear_underflowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_clear_underflow');
  late final _mpfr_clear_underflow =
      _mpfr_clear_underflowPtr.asFunction<void Function()>();

  void mpfr_clear_overflow() {
    return _mpfr_clear_overflow();
  }

  late final _mpfr_clear_overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_clear_overflow');
  late final _mpfr_clear_overflow =
      _mpfr_clear_overflowPtr.asFunction<void Function()>();

  void mpfr_clear_divby0() {
    return _mpfr_clear_divby0();
  }

  late final _mpfr_clear_divby0Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_clear_divby0');
  late final _mpfr_clear_divby0 =
      _mpfr_clear_divby0Ptr.asFunction<void Function()>();

  void mpfr_clear_nanflag() {
    return _mpfr_clear_nanflag();
  }

  late final _mpfr_clear_nanflagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_clear_nanflag');
  late final _mpfr_clear_nanflag =
      _mpfr_clear_nanflagPtr.asFunction<void Function()>();

  void mpfr_clear_inexflag() {
    return _mpfr_clear_inexflag();
  }

  late final _mpfr_clear_inexflagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_clear_inexflag');
  late final _mpfr_clear_inexflag =
      _mpfr_clear_inexflagPtr.asFunction<void Function()>();

  void mpfr_clear_erangeflag() {
    return _mpfr_clear_erangeflag();
  }

  late final _mpfr_clear_erangeflagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_clear_erangeflag');
  late final _mpfr_clear_erangeflag =
      _mpfr_clear_erangeflagPtr.asFunction<void Function()>();

  void mpfr_set_underflow() {
    return _mpfr_set_underflow();
  }

  late final _mpfr_set_underflowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_set_underflow');
  late final _mpfr_set_underflow =
      _mpfr_set_underflowPtr.asFunction<void Function()>();

  void mpfr_set_overflow() {
    return _mpfr_set_overflow();
  }

  late final _mpfr_set_overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_set_overflow');
  late final _mpfr_set_overflow =
      _mpfr_set_overflowPtr.asFunction<void Function()>();

  void mpfr_set_divby0() {
    return _mpfr_set_divby0();
  }

  late final _mpfr_set_divby0Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_set_divby0');
  late final _mpfr_set_divby0 =
      _mpfr_set_divby0Ptr.asFunction<void Function()>();

  void mpfr_set_nanflag() {
    return _mpfr_set_nanflag();
  }

  late final _mpfr_set_nanflagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_set_nanflag');
  late final _mpfr_set_nanflag =
      _mpfr_set_nanflagPtr.asFunction<void Function()>();

  void mpfr_set_inexflag() {
    return _mpfr_set_inexflag();
  }

  late final _mpfr_set_inexflagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_set_inexflag');
  late final _mpfr_set_inexflag =
      _mpfr_set_inexflagPtr.asFunction<void Function()>();

  void mpfr_set_erangeflag() {
    return _mpfr_set_erangeflag();
  }

  late final _mpfr_set_erangeflagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_set_erangeflag');
  late final _mpfr_set_erangeflag =
      _mpfr_set_erangeflagPtr.asFunction<void Function()>();

  int mpfr_underflow_p() {
    return _mpfr_underflow_p();
  }

  late final _mpfr_underflow_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_underflow_p');
  late final _mpfr_underflow_p =
      _mpfr_underflow_pPtr.asFunction<int Function()>();

  int mpfr_overflow_p() {
    return _mpfr_overflow_p();
  }

  late final _mpfr_overflow_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_overflow_p');
  late final _mpfr_overflow_p =
      _mpfr_overflow_pPtr.asFunction<int Function()>();

  int mpfr_divby0_p() {
    return _mpfr_divby0_p();
  }

  late final _mpfr_divby0_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_divby0_p');
  late final _mpfr_divby0_p = _mpfr_divby0_pPtr.asFunction<int Function()>();

  int mpfr_nanflag_p() {
    return _mpfr_nanflag_p();
  }

  late final _mpfr_nanflag_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_nanflag_p');
  late final _mpfr_nanflag_p = _mpfr_nanflag_pPtr.asFunction<int Function()>();

  int mpfr_inexflag_p() {
    return _mpfr_inexflag_p();
  }

  late final _mpfr_inexflag_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_inexflag_p');
  late final _mpfr_inexflag_p =
      _mpfr_inexflag_pPtr.asFunction<int Function()>();

  int mpfr_erangeflag_p() {
    return _mpfr_erangeflag_p();
  }

  late final _mpfr_erangeflag_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_erangeflag_p');
  late final _mpfr_erangeflag_p =
      _mpfr_erangeflag_pPtr.asFunction<int Function()>();

  void mpfr_flags_clear(
    int arg0,
  ) {
    return _mpfr_flags_clear(
      arg0,
    );
  }

  late final _mpfr_flags_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_flags_t)>>(
          'mpfr_flags_clear');
  late final _mpfr_flags_clear =
      _mpfr_flags_clearPtr.asFunction<void Function(int)>();

  void mpfr_flags_set(
    int arg0,
  ) {
    return _mpfr_flags_set(
      arg0,
    );
  }

  late final _mpfr_flags_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_flags_t)>>(
          'mpfr_flags_set');
  late final _mpfr_flags_set =
      _mpfr_flags_setPtr.asFunction<void Function(int)>();

  int mpfr_flags_test(
    int arg0,
  ) {
    return _mpfr_flags_test(
      arg0,
    );
  }

  late final _mpfr_flags_testPtr =
      _lookup<ffi.NativeFunction<mpfr_flags_t Function(mpfr_flags_t)>>(
          'mpfr_flags_test');
  late final _mpfr_flags_test =
      _mpfr_flags_testPtr.asFunction<int Function(int)>();

  int mpfr_flags_save() {
    return _mpfr_flags_save();
  }

  late final _mpfr_flags_savePtr =
      _lookup<ffi.NativeFunction<mpfr_flags_t Function()>>('mpfr_flags_save');
  late final _mpfr_flags_save =
      _mpfr_flags_savePtr.asFunction<int Function()>();

  void mpfr_flags_restore(
    int arg0,
    int arg1,
  ) {
    return _mpfr_flags_restore(
      arg0,
      arg1,
    );
  }

  late final _mpfr_flags_restorePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(mpfr_flags_t, mpfr_flags_t)>>(
      'mpfr_flags_restore');
  late final _mpfr_flags_restore =
      _mpfr_flags_restorePtr.asFunction<void Function(int, int)>();

  int mpfr_check_range(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_check_range(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_check_rangePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Int, ffi.Int)>>(
          'mpfr_check_range');
  late final _mpfr_check_range =
      _mpfr_check_rangePtr.asFunction<int Function(mpfr_ptr, int, int)>();

  void mpfr_init2(
    mpfr_ptr arg0,
    int arg1,
  ) {
    return _mpfr_init2(
      arg0,
      arg1,
    );
  }

  late final _mpfr_init2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr, mpfr_prec_t)>>(
          'mpfr_init2');
  late final _mpfr_init2 =
      _mpfr_init2Ptr.asFunction<void Function(mpfr_ptr, int)>();

  void mpfr_init(
    mpfr_ptr arg0,
  ) {
    return _mpfr_init(
      arg0,
    );
  }

  late final _mpfr_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>('mpfr_init');
  late final _mpfr_init = _mpfr_initPtr.asFunction<void Function(mpfr_ptr)>();

  void mpfr_clear(
    mpfr_ptr arg0,
  ) {
    return _mpfr_clear(
      arg0,
    );
  }

  late final _mpfr_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>('mpfr_clear');
  late final _mpfr_clear = _mpfr_clearPtr.asFunction<void Function(mpfr_ptr)>();

  // getter for _mpfr_clearPtr
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>> get mpfr_clearPtr =>
      _mpfr_clearPtr;

  void mpfr_inits2(
    int arg0,
    mpfr_ptr arg1,
  ) {
    return _mpfr_inits2(
      arg0,
      arg1,
    );
  }

  late final _mpfr_inits2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_prec_t, mpfr_ptr)>>(
          'mpfr_inits2');
  late final _mpfr_inits2 =
      _mpfr_inits2Ptr.asFunction<void Function(int, mpfr_ptr)>();

  void mpfr_inits(
    mpfr_ptr arg0,
  ) {
    return _mpfr_inits(
      arg0,
    );
  }

  late final _mpfr_initsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>('mpfr_inits');
  late final _mpfr_inits = _mpfr_initsPtr.asFunction<void Function(mpfr_ptr)>();

  void mpfr_clears(
    mpfr_ptr arg0,
  ) {
    return _mpfr_clears(
      arg0,
    );
  }

  late final _mpfr_clearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>('mpfr_clears');
  late final _mpfr_clears =
      _mpfr_clearsPtr.asFunction<void Function(mpfr_ptr)>();

  int mpfr_prec_round(
    mpfr_ptr arg0,
    Dartmpfr_prec_t arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_prec_round(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_prec_roundPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_prec_t, ffi.Int)>>(
      'mpfr_prec_round');
  late final _mpfr_prec_round =
      _mpfr_prec_roundPtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_can_round(
    mpfr_srcptr arg0,
    Dartmpfr_exp_t arg1,
    mpfr_rnd_t arg2,
    mpfr_rnd_t arg3,
    Dartmpfr_prec_t arg4,
  ) {
    return _mpfr_can_round(
      arg0,
      arg1,
      arg2.value,
      arg3.value,
      arg4,
    );
  }

  late final _mpfr_can_roundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_srcptr, mpfr_exp_t, ffi.Int, ffi.Int,
              mpfr_prec_t)>>('mpfr_can_round');
  late final _mpfr_can_round = _mpfr_can_roundPtr
      .asFunction<int Function(mpfr_srcptr, int, int, int, int)>();

  int mpfr_min_prec(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_min_prec(
      arg0,
    );
  }

  late final _mpfr_min_precPtr =
      _lookup<ffi.NativeFunction<mpfr_prec_t Function(mpfr_srcptr)>>(
          'mpfr_min_prec');
  late final _mpfr_min_prec =
      _mpfr_min_precPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_get_exp(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_get_exp(
      arg0,
    );
  }

  late final _mpfr_get_expPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function(mpfr_srcptr)>>(
          'mpfr_get_exp');
  late final _mpfr_get_exp =
      _mpfr_get_expPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_set_exp(
    mpfr_ptr arg0,
    int arg1,
  ) {
    return _mpfr_set_exp(
      arg0,
      arg1,
    );
  }

  late final _mpfr_set_expPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_exp_t)>>(
          'mpfr_set_exp');
  late final _mpfr_set_exp =
      _mpfr_set_expPtr.asFunction<int Function(mpfr_ptr, int)>();

  int mpfr_get_prec(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_get_prec(
      arg0,
    );
  }

  late final _mpfr_get_precPtr =
      _lookup<ffi.NativeFunction<mpfr_prec_t Function(mpfr_srcptr)>>(
          'mpfr_get_prec');
  late final _mpfr_get_prec =
      _mpfr_get_precPtr.asFunction<int Function(mpfr_srcptr)>();

  void mpfr_set_prec(
    mpfr_ptr arg0,
    int arg1,
  ) {
    return _mpfr_set_prec(
      arg0,
      arg1,
    );
  }

  late final _mpfr_set_precPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr, mpfr_prec_t)>>(
          'mpfr_set_prec');
  late final _mpfr_set_prec =
      _mpfr_set_precPtr.asFunction<void Function(mpfr_ptr, int)>();

  void mpfr_set_prec_raw(
    mpfr_ptr arg0,
    int arg1,
  ) {
    return _mpfr_set_prec_raw(
      arg0,
      arg1,
    );
  }

  late final _mpfr_set_prec_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr, mpfr_prec_t)>>(
          'mpfr_set_prec_raw');
  late final _mpfr_set_prec_raw =
      _mpfr_set_prec_rawPtr.asFunction<void Function(mpfr_ptr, int)>();

  void mpfr_set_default_prec(
    int arg0,
  ) {
    return _mpfr_set_default_prec(
      arg0,
    );
  }

  late final _mpfr_set_default_precPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_prec_t)>>(
          'mpfr_set_default_prec');
  late final _mpfr_set_default_prec =
      _mpfr_set_default_precPtr.asFunction<void Function(int)>();

  int mpfr_get_default_prec() {
    return _mpfr_get_default_prec();
  }

  late final _mpfr_get_default_precPtr =
      _lookup<ffi.NativeFunction<mpfr_prec_t Function()>>(
          'mpfr_get_default_prec');
  late final _mpfr_get_default_prec =
      _mpfr_get_default_precPtr.asFunction<int Function()>();

  int mpfr_set_d(
    mpfr_ptr arg0,
    double arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set_d(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_set_dPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Double, ffi.Int)>>(
      'mpfr_set_d');
  late final _mpfr_set_d =
      _mpfr_set_dPtr.asFunction<int Function(mpfr_ptr, double, int)>();

  int mpfr_set_flt(
    mpfr_ptr arg0,
    double arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set_flt(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_set_fltPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Float, ffi.Int)>>(
      'mpfr_set_flt');
  late final _mpfr_set_flt =
      _mpfr_set_fltPtr.asFunction<int Function(mpfr_ptr, double, int)>();

  int mpfr_set_z(
    mpfr_ptr arg0,
    mpz_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set_z(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_set_zPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpz_srcptr, ffi.Int)>>(
      'mpfr_set_z');
  late final _mpfr_set_z =
      _mpfr_set_zPtr.asFunction<int Function(mpfr_ptr, mpz_srcptr, int)>();

  int mpfr_set_z_2exp(
    mpfr_ptr arg0,
    mpz_srcptr arg1,
    Dartmpfr_exp_t arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_set_z_2exp(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_set_z_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpz_srcptr, mpfr_exp_t, ffi.Int)>>('mpfr_set_z_2exp');
  late final _mpfr_set_z_2exp = _mpfr_set_z_2expPtr
      .asFunction<int Function(mpfr_ptr, mpz_srcptr, int, int)>();

  void mpfr_set_nan(
    mpfr_ptr arg0,
  ) {
    return _mpfr_set_nan(
      arg0,
    );
  }

  late final _mpfr_set_nanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>('mpfr_set_nan');
  late final _mpfr_set_nan =
      _mpfr_set_nanPtr.asFunction<void Function(mpfr_ptr)>();

  void mpfr_set_inf(
    mpfr_ptr arg0,
    int arg1,
  ) {
    return _mpfr_set_inf(
      arg0,
      arg1,
    );
  }

  late final _mpfr_set_infPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr, ffi.Int)>>(
          'mpfr_set_inf');
  late final _mpfr_set_inf =
      _mpfr_set_infPtr.asFunction<void Function(mpfr_ptr, int)>();

  void mpfr_set_zero(
    mpfr_ptr arg0,
    int arg1,
  ) {
    return _mpfr_set_zero(
      arg0,
      arg1,
    );
  }

  late final _mpfr_set_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr, ffi.Int)>>(
          'mpfr_set_zero');
  late final _mpfr_set_zero =
      _mpfr_set_zeroPtr.asFunction<void Function(mpfr_ptr, int)>();

  int mpfr_set_f(
    mpfr_ptr arg0,
    mpf_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set_f(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_set_fPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpf_srcptr, ffi.Int)>>(
      'mpfr_set_f');
  late final _mpfr_set_f =
      _mpfr_set_fPtr.asFunction<int Function(mpfr_ptr, mpf_srcptr, int)>();

  int mpfr_cmp_f(
    mpfr_srcptr arg0,
    mpf_srcptr arg1,
  ) {
    return _mpfr_cmp_f(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmp_fPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpf_srcptr)>>(
          'mpfr_cmp_f');
  late final _mpfr_cmp_f =
      _mpfr_cmp_fPtr.asFunction<int Function(mpfr_srcptr, mpf_srcptr)>();

  int mpfr_get_f(
    mpf_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_get_f(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_get_fPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpf_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_get_f');
  late final _mpfr_get_f =
      _mpfr_get_fPtr.asFunction<int Function(mpf_ptr, mpfr_srcptr, int)>();

  int mpfr_set_si(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set_si(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_set_siPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Long, ffi.Int)>>(
      'mpfr_set_si');
  late final _mpfr_set_si =
      _mpfr_set_siPtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_set_ui(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set_ui(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_set_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_set_ui');
  late final _mpfr_set_ui =
      _mpfr_set_uiPtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_set_si_2exp(
    mpfr_ptr arg0,
    int arg1,
    Dartmpfr_exp_t arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_set_si_2exp(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_set_si_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Long, mpfr_exp_t, ffi.Int)>>('mpfr_set_si_2exp');
  late final _mpfr_set_si_2exp =
      _mpfr_set_si_2expPtr.asFunction<int Function(mpfr_ptr, int, int, int)>();

  int mpfr_set_ui_2exp(
    mpfr_ptr arg0,
    int arg1,
    Dartmpfr_exp_t arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_set_ui_2exp(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_set_ui_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.UnsignedLong, mpfr_exp_t,
              ffi.Int)>>('mpfr_set_ui_2exp');
  late final _mpfr_set_ui_2exp =
      _mpfr_set_ui_2expPtr.asFunction<int Function(mpfr_ptr, int, int, int)>();

  int mpfr_set_q(
    mpfr_ptr arg0,
    mpq_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set_q(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_set_qPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpq_srcptr, ffi.Int)>>(
      'mpfr_set_q');
  late final _mpfr_set_q =
      _mpfr_set_qPtr.asFunction<int Function(mpfr_ptr, mpq_srcptr, int)>();

  int mpfr_mul_q(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpq_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_q(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpq_srcptr, ffi.Int)>>('mpfr_mul_q');
  late final _mpfr_mul_q = _mpfr_mul_qPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpq_srcptr, int)>();

  int mpfr_div_q(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpq_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_q(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpq_srcptr, ffi.Int)>>('mpfr_div_q');
  late final _mpfr_div_q = _mpfr_div_qPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpq_srcptr, int)>();

  int mpfr_add_q(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpq_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_add_q(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_add_qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpq_srcptr, ffi.Int)>>('mpfr_add_q');
  late final _mpfr_add_q = _mpfr_add_qPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpq_srcptr, int)>();

  int mpfr_sub_q(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpq_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sub_q(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sub_qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpq_srcptr, ffi.Int)>>('mpfr_sub_q');
  late final _mpfr_sub_q = _mpfr_sub_qPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpq_srcptr, int)>();

  int mpfr_cmp_q(
    mpfr_srcptr arg0,
    mpq_srcptr arg1,
  ) {
    return _mpfr_cmp_q(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmp_qPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpq_srcptr)>>(
          'mpfr_cmp_q');
  late final _mpfr_cmp_q =
      _mpfr_cmp_qPtr.asFunction<int Function(mpfr_srcptr, mpq_srcptr)>();

  void mpfr_get_q(
    mpq_ptr q,
    mpfr_srcptr f,
  ) {
    return _mpfr_get_q(
      q,
      f,
    );
  }

  late final _mpfr_get_qPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpq_ptr, mpfr_srcptr)>>(
          'mpfr_get_q');
  late final _mpfr_get_q =
      _mpfr_get_qPtr.asFunction<void Function(mpq_ptr, mpfr_srcptr)>();

  int mpfr_set_str(
    mpfr_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_set_str(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_set_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<ffi.Utf8>, ffi.Int,
              ffi.Int)>>('mpfr_set_str');
  late final _mpfr_set_str = _mpfr_set_strPtr
      .asFunction<int Function(mpfr_ptr, ffi.Pointer<ffi.Utf8>, int, int)>();

  int mpfr_init_set_str(
    mpfr_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_init_set_str(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_init_set_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<ffi.Utf8>, ffi.Int,
              ffi.Int)>>('mpfr_init_set_str');
  late final _mpfr_init_set_str = _mpfr_init_set_strPtr
      .asFunction<int Function(mpfr_ptr, ffi.Pointer<ffi.Utf8>, int, int)>();

  int mpfr_set4(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
    int arg3,
  ) {
    return _mpfr_set4(
      arg0,
      arg1,
      arg2.value,
      arg3,
    );
  }

  late final _mpfr_set4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Int, ffi.Int)>>('mpfr_set4');
  late final _mpfr_set4 =
      _mpfr_set4Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_abs(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_abs(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_absPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_abs');
  late final _mpfr_abs =
      _mpfr_absPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_set(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_set(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_setPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_set');
  late final _mpfr_set =
      _mpfr_setPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_neg(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_neg(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_negPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_neg');
  late final _mpfr_neg =
      _mpfr_negPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_signbit(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_signbit(
      arg0,
    );
  }

  late final _mpfr_signbitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>(
          'mpfr_signbit');
  late final _mpfr_signbit =
      _mpfr_signbitPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_setsign(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_setsign(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_setsignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Int, ffi.Int)>>('mpfr_setsign');
  late final _mpfr_setsign = _mpfr_setsignPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_copysign(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_copysign(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_copysignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_copysign');
  late final _mpfr_copysign = _mpfr_copysignPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_get_z_2exp(
    mpz_ptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_get_z_2exp(
      arg0,
      arg1,
    );
  }

  late final _mpfr_get_z_2expPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function(mpz_ptr, mpfr_srcptr)>>(
          'mpfr_get_z_2exp');
  late final _mpfr_get_z_2exp =
      _mpfr_get_z_2expPtr.asFunction<int Function(mpz_ptr, mpfr_srcptr)>();

  double mpfr_get_flt(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_get_flt(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_get_fltPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_get_flt');
  late final _mpfr_get_flt =
      _mpfr_get_fltPtr.asFunction<double Function(mpfr_srcptr, int)>();

  double mpfr_get_d(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_get_d(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_get_dPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_get_d');
  late final _mpfr_get_d =
      _mpfr_get_dPtr.asFunction<double Function(mpfr_srcptr, int)>();

  double mpfr_get_d1(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_get_d1(
      arg0,
    );
  }

  late final _mpfr_get_d1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(mpfr_srcptr)>>(
          'mpfr_get_d1');
  late final _mpfr_get_d1 =
      _mpfr_get_d1Ptr.asFunction<double Function(mpfr_srcptr)>();

  double mpfr_get_d_2exp(
    ffi.Pointer<ffi.Long> arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_get_d_2exp(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_get_d_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Long>, mpfr_srcptr, ffi.Int)>>('mpfr_get_d_2exp');
  late final _mpfr_get_d_2exp = _mpfr_get_d_2expPtr
      .asFunction<double Function(ffi.Pointer<ffi.Long>, mpfr_srcptr, int)>();

  int mpfr_frexp(
    ffi.Pointer<mpfr_exp_t> arg0,
    mpfr_ptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_frexp(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mpfr_exp_t>, mpfr_ptr, mpfr_srcptr,
              ffi.Int)>>('mpfr_frexp');
  late final _mpfr_frexp = _mpfr_frexpPtr.asFunction<
      int Function(ffi.Pointer<mpfr_exp_t>, mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_get_si(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_get_si(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_get_siPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_get_si');
  late final _mpfr_get_si =
      _mpfr_get_siPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_get_ui(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_get_ui(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_get_uiPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(mpfr_srcptr, ffi.Int)>>(
      'mpfr_get_ui');
  late final _mpfr_get_ui =
      _mpfr_get_uiPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_get_str_ndigits(
    int arg0,
    int arg1,
  ) {
    return _mpfr_get_str_ndigits(
      arg0,
      arg1,
    );
  }

  late final _mpfr_get_str_ndigitsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Int, mpfr_prec_t)>>(
          'mpfr_get_str_ndigits');
  late final _mpfr_get_str_ndigits =
      _mpfr_get_str_ndigitsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Utf8> mpfr_get_str(
    ffi.Pointer<ffi.Utf8> arg0,
    ffi.Pointer<mpfr_exp_t> arg1,
    int arg2,
    int arg3,
    mpfr_srcptr arg4,
    mpfr_rnd_t arg5,
  ) {
    return _mpfr_get_str(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5.value,
    );
  }

  late final _mpfr_get_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Utf8> Function(
              ffi.Pointer<ffi.Utf8>,
              ffi.Pointer<mpfr_exp_t>,
              ffi.Int,
              ffi.Size,
              mpfr_srcptr,
              ffi.Int)>>('mpfr_get_str');
  late final _mpfr_get_str = _mpfr_get_strPtr.asFunction<
      ffi.Pointer<ffi.Utf8> Function(ffi.Pointer<ffi.Utf8>,
          ffi.Pointer<mpfr_exp_t>, int, int, mpfr_srcptr, int)>();

  int mpfr_get_z(
    mpz_ptr z,
    mpfr_srcptr f,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_get_z(
      z,
      f,
      arg2.value,
    );
  }

  late final _mpfr_get_zPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpz_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_get_z');
  late final _mpfr_get_z =
      _mpfr_get_zPtr.asFunction<int Function(mpz_ptr, mpfr_srcptr, int)>();

  void mpfr_free_str(
    ffi.Pointer<ffi.Utf8> arg0,
  ) {
    return _mpfr_free_str(
      arg0,
    );
  }

  late final _mpfr_free_strPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Utf8>)>>(
          'mpfr_free_str');
  late final _mpfr_free_str =
      _mpfr_free_strPtr.asFunction<void Function(ffi.Pointer<ffi.Utf8>)>();

  int mpfr_urandom(
    mpfr_ptr arg0,
    ffi.Pointer<__gmp_randstate_struct> arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_urandom(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_urandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>,
              ffi.Int)>>('mpfr_urandom');
  late final _mpfr_urandom = _mpfr_urandomPtr.asFunction<
      int Function(mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>, int)>();

  int mpfr_grandom(
    mpfr_ptr arg0,
    mpfr_ptr arg1,
    ffi.Pointer<__gmp_randstate_struct> arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_grandom(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_grandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_ptr,
              ffi.Pointer<__gmp_randstate_struct>, ffi.Int)>>('mpfr_grandom');
  late final _mpfr_grandom = _mpfr_grandomPtr.asFunction<
      int Function(
          mpfr_ptr, mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>, int)>();

  int mpfr_nrandom(
    mpfr_ptr arg0,
    ffi.Pointer<__gmp_randstate_struct> arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_nrandom(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_nrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>,
              ffi.Int)>>('mpfr_nrandom');
  late final _mpfr_nrandom = _mpfr_nrandomPtr.asFunction<
      int Function(mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>, int)>();

  int mpfr_erandom(
    mpfr_ptr arg0,
    ffi.Pointer<__gmp_randstate_struct> arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_erandom(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_erandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>,
              ffi.Int)>>('mpfr_erandom');
  late final _mpfr_erandom = _mpfr_erandomPtr.asFunction<
      int Function(mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>, int)>();

  int mpfr_urandomb(
    mpfr_ptr arg0,
    ffi.Pointer<__gmp_randstate_struct> arg1,
  ) {
    return _mpfr_urandomb(
      arg0,
      arg1,
    );
  }

  late final _mpfr_urandombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>)>>('mpfr_urandomb');
  late final _mpfr_urandomb = _mpfr_urandombPtr.asFunction<
      int Function(mpfr_ptr, ffi.Pointer<__gmp_randstate_struct>)>();

  void mpfr_nextabove(
    mpfr_ptr arg0,
  ) {
    return _mpfr_nextabove(
      arg0,
    );
  }

  late final _mpfr_nextabovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>(
          'mpfr_nextabove');
  late final _mpfr_nextabove =
      _mpfr_nextabovePtr.asFunction<void Function(mpfr_ptr)>();

  void mpfr_nextbelow(
    mpfr_ptr arg0,
  ) {
    return _mpfr_nextbelow(
      arg0,
    );
  }

  late final _mpfr_nextbelowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>(
          'mpfr_nextbelow');
  late final _mpfr_nextbelow =
      _mpfr_nextbelowPtr.asFunction<void Function(mpfr_ptr)>();

  void mpfr_nexttoward(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_nexttoward(
      arg0,
      arg1,
    );
  }

  late final _mpfr_nexttowardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr, mpfr_srcptr)>>(
          'mpfr_nexttoward');
  late final _mpfr_nexttoward =
      _mpfr_nexttowardPtr.asFunction<void Function(mpfr_ptr, mpfr_srcptr)>();

  int mpfr_printf(
    ffi.Pointer<ffi.Utf8> arg0,
  ) {
    return _mpfr_printf(
      arg0,
    );
  }

  late final _mpfr_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Utf8>)>>(
          'mpfr_printf');
  late final _mpfr_printf =
      _mpfr_printfPtr.asFunction<int Function(ffi.Pointer<ffi.Utf8>)>();

  int mpfr_asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Utf8>> arg0,
    ffi.Pointer<ffi.Utf8> arg1,
  ) {
    return _mpfr_asprintf(
      arg0,
      arg1,
    );
  }

  late final _mpfr_asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Utf8>>,
              ffi.Pointer<ffi.Utf8>)>>('mpfr_asprintf');
  late final _mpfr_asprintf = _mpfr_asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Utf8>>, ffi.Pointer<ffi.Utf8>)>();

  int mpfr_sprintf(
    ffi.Pointer<ffi.Utf8> arg0,
    ffi.Pointer<ffi.Utf8> arg1,
  ) {
    return _mpfr_sprintf(
      arg0,
      arg1,
    );
  }

  late final _mpfr_sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Utf8>, ffi.Pointer<ffi.Utf8>)>>('mpfr_sprintf');
  late final _mpfr_sprintf = _mpfr_sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Utf8>, ffi.Pointer<ffi.Utf8>)>();

  int mpfr_snprintf(
    ffi.Pointer<ffi.Utf8> arg0,
    int arg1,
    ffi.Pointer<ffi.Utf8> arg2,
  ) {
    return _mpfr_snprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mpfr_snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Utf8>, ffi.Size,
              ffi.Pointer<ffi.Utf8>)>>('mpfr_snprintf');
  late final _mpfr_snprintf = _mpfr_snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Utf8>, int, ffi.Pointer<ffi.Utf8>)>();

  int mpfr_pow(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_pow(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_powPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_pow');
  late final _mpfr_pow = _mpfr_powPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_powr(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_powr(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_powrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_powr');
  late final _mpfr_powr = _mpfr_powrPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_pow_si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_pow_si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_pow_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_pow_si');
  late final _mpfr_pow_si = _mpfr_pow_siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_compound_si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_compound_si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_compound_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_compound_si');
  late final _mpfr_compound_si = _mpfr_compound_siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_pow_ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_pow_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_pow_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_pow_ui');
  late final _mpfr_pow_ui = _mpfr_pow_uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_ui_pow_ui(
    mpfr_ptr arg0,
    int arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_ui_pow_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_ui_pow_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.UnsignedLong, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_ui_pow_ui');
  late final _mpfr_ui_pow_ui =
      _mpfr_ui_pow_uiPtr.asFunction<int Function(mpfr_ptr, int, int, int)>();

  int mpfr_ui_pow(
    mpfr_ptr arg0,
    int arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_ui_pow(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_ui_powPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.UnsignedLong, mpfr_srcptr,
              ffi.Int)>>('mpfr_ui_pow');
  late final _mpfr_ui_pow = _mpfr_ui_powPtr
      .asFunction<int Function(mpfr_ptr, int, mpfr_srcptr, int)>();

  int mpfr_pow_z(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpz_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_pow_z(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_pow_zPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpz_srcptr, ffi.Int)>>('mpfr_pow_z');
  late final _mpfr_pow_z = _mpfr_pow_zPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpz_srcptr, int)>();

  int mpfr_sqrt(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sqrt(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_sqrtPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_sqrt');
  late final _mpfr_sqrt =
      _mpfr_sqrtPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_sqrt_ui(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sqrt_ui(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_sqrt_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_sqrt_ui');
  late final _mpfr_sqrt_ui =
      _mpfr_sqrt_uiPtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_rec_sqrt(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_rec_sqrt(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_rec_sqrtPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_rec_sqrt');
  late final _mpfr_rec_sqrt =
      _mpfr_rec_sqrtPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_add(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_add(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_add');
  late final _mpfr_add = _mpfr_addPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_sub(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sub(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_sub');
  late final _mpfr_sub = _mpfr_subPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_mul(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_mul');
  late final _mpfr_mul = _mpfr_mulPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_div(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_div');
  late final _mpfr_div = _mpfr_divPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_add_ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_add_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_add_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_add_ui');
  late final _mpfr_add_ui = _mpfr_add_uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_sub_ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sub_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sub_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_sub_ui');
  late final _mpfr_sub_ui = _mpfr_sub_uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_ui_sub(
    mpfr_ptr arg0,
    int arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_ui_sub(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_ui_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.UnsignedLong, mpfr_srcptr,
              ffi.Int)>>('mpfr_ui_sub');
  late final _mpfr_ui_sub = _mpfr_ui_subPtr
      .asFunction<int Function(mpfr_ptr, int, mpfr_srcptr, int)>();

  int mpfr_mul_ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_mul_ui');
  late final _mpfr_mul_ui = _mpfr_mul_uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_div_ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_div_ui');
  late final _mpfr_div_ui = _mpfr_div_uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_ui_div(
    mpfr_ptr arg0,
    int arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_ui_div(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_ui_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.UnsignedLong, mpfr_srcptr,
              ffi.Int)>>('mpfr_ui_div');
  late final _mpfr_ui_div = _mpfr_ui_divPtr
      .asFunction<int Function(mpfr_ptr, int, mpfr_srcptr, int)>();

  int mpfr_add_si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_add_si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_add_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_add_si');
  late final _mpfr_add_si = _mpfr_add_siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_sub_si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sub_si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sub_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_sub_si');
  late final _mpfr_sub_si = _mpfr_sub_siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_si_sub(
    mpfr_ptr arg0,
    int arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_si_sub(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_si_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Long, mpfr_srcptr, ffi.Int)>>('mpfr_si_sub');
  late final _mpfr_si_sub = _mpfr_si_subPtr
      .asFunction<int Function(mpfr_ptr, int, mpfr_srcptr, int)>();

  int mpfr_mul_si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_mul_si');
  late final _mpfr_mul_si = _mpfr_mul_siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_div_si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_div_si');
  late final _mpfr_div_si = _mpfr_div_siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_si_div(
    mpfr_ptr arg0,
    int arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_si_div(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_si_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Long, mpfr_srcptr, ffi.Int)>>('mpfr_si_div');
  late final _mpfr_si_div = _mpfr_si_divPtr
      .asFunction<int Function(mpfr_ptr, int, mpfr_srcptr, int)>();

  int mpfr_add_d(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    double arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_add_d(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_add_dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Double, ffi.Int)>>('mpfr_add_d');
  late final _mpfr_add_d = _mpfr_add_dPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, double, int)>();

  int mpfr_sub_d(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    double arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sub_d(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sub_dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Double, ffi.Int)>>('mpfr_sub_d');
  late final _mpfr_sub_d = _mpfr_sub_dPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, double, int)>();

  int mpfr_d_sub(
    mpfr_ptr arg0,
    double arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_d_sub(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_d_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Double, mpfr_srcptr, ffi.Int)>>('mpfr_d_sub');
  late final _mpfr_d_sub = _mpfr_d_subPtr
      .asFunction<int Function(mpfr_ptr, double, mpfr_srcptr, int)>();

  int mpfr_mul_d(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    double arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_d(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Double, ffi.Int)>>('mpfr_mul_d');
  late final _mpfr_mul_d = _mpfr_mul_dPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, double, int)>();

  int mpfr_div_d(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    double arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_d(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Double, ffi.Int)>>('mpfr_div_d');
  late final _mpfr_div_d = _mpfr_div_dPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, double, int)>();

  int mpfr_d_div(
    mpfr_ptr arg0,
    double arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_d_div(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_d_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Double, mpfr_srcptr, ffi.Int)>>('mpfr_d_div');
  late final _mpfr_d_div = _mpfr_d_divPtr
      .asFunction<int Function(mpfr_ptr, double, mpfr_srcptr, int)>();

  int mpfr_sqr(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sqr(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_sqrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_sqr');
  late final _mpfr_sqr =
      _mpfr_sqrPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_const_pi(
    mpfr_ptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_const_pi(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_const_piPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Int)>>(
          'mpfr_const_pi');
  late final _mpfr_const_pi =
      _mpfr_const_piPtr.asFunction<int Function(mpfr_ptr, int)>();

  int mpfr_const_log2(
    mpfr_ptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_const_log2(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_const_log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Int)>>(
          'mpfr_const_log2');
  late final _mpfr_const_log2 =
      _mpfr_const_log2Ptr.asFunction<int Function(mpfr_ptr, int)>();

  int mpfr_const_euler(
    mpfr_ptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_const_euler(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_const_eulerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Int)>>(
          'mpfr_const_euler');
  late final _mpfr_const_euler =
      _mpfr_const_eulerPtr.asFunction<int Function(mpfr_ptr, int)>();

  int mpfr_const_catalan(
    mpfr_ptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_const_catalan(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_const_catalanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Int)>>(
          'mpfr_const_catalan');
  late final _mpfr_const_catalan =
      _mpfr_const_catalanPtr.asFunction<int Function(mpfr_ptr, int)>();

  int mpfr_agm(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_agm(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_agmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_agm');
  late final _mpfr_agm = _mpfr_agmPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_log(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_log(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_logPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_log');
  late final _mpfr_log =
      _mpfr_logPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_log2(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_log2(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_log2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_log2');
  late final _mpfr_log2 =
      _mpfr_log2Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_log10(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_log10(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_log10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_log10');
  late final _mpfr_log10 =
      _mpfr_log10Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_log1p(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_log1p(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_log1pPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_log1p');
  late final _mpfr_log1p =
      _mpfr_log1pPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_log2p1(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_log2p1(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_log2p1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_log2p1');
  late final _mpfr_log2p1 =
      _mpfr_log2p1Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_log10p1(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_log10p1(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_log10p1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_log10p1');
  late final _mpfr_log10p1 =
      _mpfr_log10p1Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_log_ui(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_log_ui(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_log_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_log_ui');
  late final _mpfr_log_ui =
      _mpfr_log_uiPtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_exp(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_exp(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_expPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_exp');
  late final _mpfr_exp =
      _mpfr_expPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_exp2(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_exp2(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_exp2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_exp2');
  late final _mpfr_exp2 =
      _mpfr_exp2Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_exp10(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_exp10(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_exp10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_exp10');
  late final _mpfr_exp10 =
      _mpfr_exp10Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_expm1(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_expm1(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_expm1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_expm1');
  late final _mpfr_expm1 =
      _mpfr_expm1Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_exp2m1(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_exp2m1(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_exp2m1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_exp2m1');
  late final _mpfr_exp2m1 =
      _mpfr_exp2m1Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_exp10m1(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_exp10m1(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_exp10m1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_exp10m1');
  late final _mpfr_exp10m1 =
      _mpfr_exp10m1Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_eint(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_eint(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_eintPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_eint');
  late final _mpfr_eint =
      _mpfr_eintPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_li2(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_li2(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_li2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_li2');
  late final _mpfr_li2 =
      _mpfr_li2Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_cmp(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_cmp(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_cmp');
  late final _mpfr_cmp =
      _mpfr_cmpPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_cmp3(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
    int arg2,
  ) {
    return _mpfr_cmp3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mpfr_cmp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_cmp3');
  late final _mpfr_cmp3 =
      _mpfr_cmp3Ptr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_cmp_d(
    mpfr_srcptr arg0,
    double arg1,
  ) {
    return _mpfr_cmp_d(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmp_dPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Double)>>(
          'mpfr_cmp_d');
  late final _mpfr_cmp_d =
      _mpfr_cmp_dPtr.asFunction<int Function(mpfr_srcptr, double)>();

  int mpfr_cmp_ui(
    mpfr_srcptr arg0,
    int arg1,
  ) {
    return _mpfr_cmp_ui(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmp_uiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.UnsignedLong)>>(
      'mpfr_cmp_ui');
  late final _mpfr_cmp_ui =
      _mpfr_cmp_uiPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_cmp_si(
    mpfr_srcptr arg0,
    int arg1,
  ) {
    return _mpfr_cmp_si(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmp_siPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Long)>>(
          'mpfr_cmp_si');
  late final _mpfr_cmp_si =
      _mpfr_cmp_siPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_cmp_ui_2exp(
    mpfr_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return _mpfr_cmp_ui_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mpfr_cmp_ui_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_srcptr, ffi.UnsignedLong, mpfr_exp_t)>>('mpfr_cmp_ui_2exp');
  late final _mpfr_cmp_ui_2exp =
      _mpfr_cmp_ui_2expPtr.asFunction<int Function(mpfr_srcptr, int, int)>();

  int mpfr_cmp_si_2exp(
    mpfr_srcptr arg0,
    int arg1,
    int arg2,
  ) {
    return _mpfr_cmp_si_2exp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mpfr_cmp_si_2expPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Long, mpfr_exp_t)>>(
      'mpfr_cmp_si_2exp');
  late final _mpfr_cmp_si_2exp =
      _mpfr_cmp_si_2expPtr.asFunction<int Function(mpfr_srcptr, int, int)>();

  int mpfr_cmpabs(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_cmpabs(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmpabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_cmpabs');
  late final _mpfr_cmpabs =
      _mpfr_cmpabsPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_cmpabs_ui(
    mpfr_srcptr arg0,
    int arg1,
  ) {
    return _mpfr_cmpabs_ui(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmpabs_uiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.UnsignedLong)>>(
      'mpfr_cmpabs_ui');
  late final _mpfr_cmpabs_ui =
      _mpfr_cmpabs_uiPtr.asFunction<int Function(mpfr_srcptr, int)>();

  void mpfr_reldiff(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_reldiff(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_reldiffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_reldiff');
  late final _mpfr_reldiff = _mpfr_reldiffPtr
      .asFunction<void Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_eq(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
    int arg2,
  ) {
    return _mpfr_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mpfr_eqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_srcptr, mpfr_srcptr, ffi.UnsignedLong)>>('mpfr_eq');
  late final _mpfr_eq =
      _mpfr_eqPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_sgn(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_sgn(
      arg0,
    );
  }

  late final _mpfr_sgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>('mpfr_sgn');
  late final _mpfr_sgn = _mpfr_sgnPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_mul_2exp(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_2exp(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_mul_2exp');
  late final _mpfr_mul_2exp = _mpfr_mul_2expPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_div_2exp(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_2exp(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_2expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_div_2exp');
  late final _mpfr_div_2exp = _mpfr_div_2expPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_mul_2ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_2ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_2uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_mul_2ui');
  late final _mpfr_mul_2ui = _mpfr_mul_2uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_div_2ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_2ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_2uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_div_2ui');
  late final _mpfr_div_2ui = _mpfr_div_2uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_mul_2si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_2si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_2siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_mul_2si');
  late final _mpfr_mul_2si = _mpfr_mul_2siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_div_2si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_2si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_2siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_div_2si');
  late final _mpfr_div_2si = _mpfr_div_2siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_rint(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_rint(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_rintPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_rint');
  late final _mpfr_rint =
      _mpfr_rintPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_roundeven(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_roundeven(
      arg0,
      arg1,
    );
  }

  late final _mpfr_roundevenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr)>>(
          'mpfr_roundeven');
  late final _mpfr_roundeven =
      _mpfr_roundevenPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr)>();

  int mpfr_round(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_round(
      arg0,
      arg1,
    );
  }

  late final _mpfr_roundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr)>>(
          'mpfr_round');
  late final _mpfr_round =
      _mpfr_roundPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr)>();

  int mpfr_trunc(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_trunc(
      arg0,
      arg1,
    );
  }

  late final _mpfr_truncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr)>>(
          'mpfr_trunc');
  late final _mpfr_trunc =
      _mpfr_truncPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr)>();

  int mpfr_ceil(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_ceil(
      arg0,
      arg1,
    );
  }

  late final _mpfr_ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr)>>(
          'mpfr_ceil');
  late final _mpfr_ceil =
      _mpfr_ceilPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr)>();

  int mpfr_floor(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_floor(
      arg0,
      arg1,
    );
  }

  late final _mpfr_floorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr)>>(
          'mpfr_floor');
  late final _mpfr_floor =
      _mpfr_floorPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr)>();

  int mpfr_rint_roundeven(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_rint_roundeven(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_rint_roundevenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_rint_roundeven');
  late final _mpfr_rint_roundeven = _mpfr_rint_roundevenPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_rint_round(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_rint_round(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_rint_roundPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_rint_round');
  late final _mpfr_rint_round = _mpfr_rint_roundPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_rint_trunc(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_rint_trunc(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_rint_truncPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_rint_trunc');
  late final _mpfr_rint_trunc = _mpfr_rint_truncPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_rint_ceil(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_rint_ceil(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_rint_ceilPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_rint_ceil');
  late final _mpfr_rint_ceil =
      _mpfr_rint_ceilPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_rint_floor(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_rint_floor(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_rint_floorPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_rint_floor');
  late final _mpfr_rint_floor = _mpfr_rint_floorPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_frac(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_frac(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_fracPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_frac');
  late final _mpfr_frac =
      _mpfr_fracPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_modf(
    mpfr_ptr arg0,
    mpfr_ptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_modf(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_ptr, mpfr_srcptr, ffi.Int)>>('mpfr_modf');
  late final _mpfr_modf = _mpfr_modfPtr
      .asFunction<int Function(mpfr_ptr, mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_remquo(
    mpfr_ptr arg0,
    ffi.Pointer<ffi.Long> arg1,
    mpfr_srcptr arg2,
    mpfr_srcptr arg3,
    mpfr_rnd_t arg4,
  ) {
    return _mpfr_remquo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4.value,
    );
  }

  late final _mpfr_remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<ffi.Long>, mpfr_srcptr,
              mpfr_srcptr, ffi.Int)>>('mpfr_remquo');
  late final _mpfr_remquo = _mpfr_remquoPtr.asFunction<
      int Function(
          mpfr_ptr, ffi.Pointer<ffi.Long>, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_remainder(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_remainder(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_remainderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_remainder');
  late final _mpfr_remainder = _mpfr_remainderPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_fmod(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_fmod(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_fmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_fmod');
  late final _mpfr_fmod = _mpfr_fmodPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_fmod_ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_fmod_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_fmod_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_fmod_ui');
  late final _mpfr_fmod_ui = _mpfr_fmod_uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_fmodquo(
    mpfr_ptr arg0,
    ffi.Pointer<ffi.Long> arg1,
    mpfr_srcptr arg2,
    mpfr_srcptr arg3,
    mpfr_rnd_t arg4,
  ) {
    return _mpfr_fmodquo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4.value,
    );
  }

  late final _mpfr_fmodquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<ffi.Long>, mpfr_srcptr,
              mpfr_srcptr, ffi.Int)>>('mpfr_fmodquo');
  late final _mpfr_fmodquo = _mpfr_fmodquoPtr.asFunction<
      int Function(
          mpfr_ptr, ffi.Pointer<ffi.Long>, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_fits_ulong_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_ulong_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_ulong_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_ulong_p');
  late final _mpfr_fits_ulong_p =
      _mpfr_fits_ulong_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_fits_slong_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_slong_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_slong_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_slong_p');
  late final _mpfr_fits_slong_p =
      _mpfr_fits_slong_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_fits_uint_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_uint_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_uint_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_uint_p');
  late final _mpfr_fits_uint_p =
      _mpfr_fits_uint_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_fits_sint_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_sint_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_sint_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_sint_p');
  late final _mpfr_fits_sint_p =
      _mpfr_fits_sint_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_fits_ushort_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_ushort_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_ushort_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_ushort_p');
  late final _mpfr_fits_ushort_p =
      _mpfr_fits_ushort_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_fits_sshort_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_sshort_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_sshort_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_sshort_p');
  late final _mpfr_fits_sshort_p =
      _mpfr_fits_sshort_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_fits_uintmax_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_uintmax_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_uintmax_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_uintmax_p');
  late final _mpfr_fits_uintmax_p =
      _mpfr_fits_uintmax_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  int mpfr_fits_intmax_p(
    mpfr_srcptr arg0,
    mpfr_rnd_t arg1,
  ) {
    return _mpfr_fits_intmax_p(
      arg0,
      arg1.value,
    );
  }

  late final _mpfr_fits_intmax_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, ffi.Int)>>(
          'mpfr_fits_intmax_p');
  late final _mpfr_fits_intmax_p =
      _mpfr_fits_intmax_pPtr.asFunction<int Function(mpfr_srcptr, int)>();

  void mpfr_extract(
    mpz_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
  ) {
    return _mpfr_extract(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mpfr_extractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              mpz_ptr, mpfr_srcptr, ffi.UnsignedInt)>>('mpfr_extract');
  late final _mpfr_extract =
      _mpfr_extractPtr.asFunction<void Function(mpz_ptr, mpfr_srcptr, int)>();

  void mpfr_swap(
    mpfr_ptr arg0,
    mpfr_ptr arg1,
  ) {
    return _mpfr_swap(
      arg0,
      arg1,
    );
  }

  late final _mpfr_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr, mpfr_ptr)>>(
          'mpfr_swap');
  late final _mpfr_swap =
      _mpfr_swapPtr.asFunction<void Function(mpfr_ptr, mpfr_ptr)>();

  void mpfr_dump(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_dump(
      arg0,
    );
  }

  late final _mpfr_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_srcptr)>>('mpfr_dump');
  late final _mpfr_dump =
      _mpfr_dumpPtr.asFunction<void Function(mpfr_srcptr)>();

  int mpfr_nan_p(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_nan_p(
      arg0,
    );
  }

  late final _mpfr_nan_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>('mpfr_nan_p');
  late final _mpfr_nan_p =
      _mpfr_nan_pPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_inf_p(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_inf_p(
      arg0,
    );
  }

  late final _mpfr_inf_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>('mpfr_inf_p');
  late final _mpfr_inf_p =
      _mpfr_inf_pPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_number_p(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_number_p(
      arg0,
    );
  }

  late final _mpfr_number_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>(
          'mpfr_number_p');
  late final _mpfr_number_p =
      _mpfr_number_pPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_integer_p(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_integer_p(
      arg0,
    );
  }

  late final _mpfr_integer_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>(
          'mpfr_integer_p');
  late final _mpfr_integer_p =
      _mpfr_integer_pPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_zero_p(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_zero_p(
      arg0,
    );
  }

  late final _mpfr_zero_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>('mpfr_zero_p');
  late final _mpfr_zero_p =
      _mpfr_zero_pPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_regular_p(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_regular_p(
      arg0,
    );
  }

  late final _mpfr_regular_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>(
          'mpfr_regular_p');
  late final _mpfr_regular_p =
      _mpfr_regular_pPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_greater_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_greater_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_greater_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_greater_p');
  late final _mpfr_greater_p =
      _mpfr_greater_pPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_greaterequal_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_greaterequal_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_greaterequal_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_greaterequal_p');
  late final _mpfr_greaterequal_p = _mpfr_greaterequal_pPtr
      .asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_less_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_less_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_less_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_less_p');
  late final _mpfr_less_p =
      _mpfr_less_pPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_lessequal_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_lessequal_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_lessequal_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_lessequal_p');
  late final _mpfr_lessequal_p =
      _mpfr_lessequal_pPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_lessgreater_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_lessgreater_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_lessgreater_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_lessgreater_p');
  late final _mpfr_lessgreater_p = _mpfr_lessgreater_pPtr
      .asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_equal_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_equal_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_equal_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_equal_p');
  late final _mpfr_equal_p =
      _mpfr_equal_pPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_unordered_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_unordered_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_unordered_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_unordered_p');
  late final _mpfr_unordered_p =
      _mpfr_unordered_pPtr.asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();

  int mpfr_atanh(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_atanh(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_atanhPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_atanh');
  late final _mpfr_atanh =
      _mpfr_atanhPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_acosh(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_acosh(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_acoshPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_acosh');
  late final _mpfr_acosh =
      _mpfr_acoshPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_asinh(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_asinh(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_asinhPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_asinh');
  late final _mpfr_asinh =
      _mpfr_asinhPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_cosh(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_cosh(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_coshPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_cosh');
  late final _mpfr_cosh =
      _mpfr_coshPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_sinh(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sinh(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_sinhPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_sinh');
  late final _mpfr_sinh =
      _mpfr_sinhPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_tanh(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_tanh(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_tanhPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_tanh');
  late final _mpfr_tanh =
      _mpfr_tanhPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_sinh_cosh(
    mpfr_ptr arg0,
    mpfr_ptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sinh_cosh(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sinh_coshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_ptr, mpfr_srcptr, ffi.Int)>>('mpfr_sinh_cosh');
  late final _mpfr_sinh_cosh = _mpfr_sinh_coshPtr
      .asFunction<int Function(mpfr_ptr, mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_sech(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sech(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_sechPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_sech');
  late final _mpfr_sech =
      _mpfr_sechPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_csch(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_csch(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_cschPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_csch');
  late final _mpfr_csch =
      _mpfr_cschPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_coth(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_coth(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_cothPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_coth');
  late final _mpfr_coth =
      _mpfr_cothPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_acos(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_acos(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_acosPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_acos');
  late final _mpfr_acos =
      _mpfr_acosPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_asin(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_asin(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_asinPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_asin');
  late final _mpfr_asin =
      _mpfr_asinPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_atan(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_atan(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_atanPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_atan');
  late final _mpfr_atan =
      _mpfr_atanPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_sin(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sin(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_sinPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_sin');
  late final _mpfr_sin =
      _mpfr_sinPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_sin_cos(
    mpfr_ptr arg0,
    mpfr_ptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sin_cos(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sin_cosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_ptr, mpfr_srcptr, ffi.Int)>>('mpfr_sin_cos');
  late final _mpfr_sin_cos = _mpfr_sin_cosPtr
      .asFunction<int Function(mpfr_ptr, mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_cos(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_cos(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_cosPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_cos');
  late final _mpfr_cos =
      _mpfr_cosPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_tan(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_tan(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_tanPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_tan');
  late final _mpfr_tan =
      _mpfr_tanPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_atan2(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_atan2(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_atan2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_atan2');
  late final _mpfr_atan2 = _mpfr_atan2Ptr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_sec(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sec(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_secPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_sec');
  late final _mpfr_sec =
      _mpfr_secPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_csc(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_csc(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_cscPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_csc');
  late final _mpfr_csc =
      _mpfr_cscPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_cot(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_cot(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_cotPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_cot');
  late final _mpfr_cot =
      _mpfr_cotPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_sinu(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sinu(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sinuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_sinu');
  late final _mpfr_sinu =
      _mpfr_sinuPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_cosu(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_cosu(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_cosuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_cosu');
  late final _mpfr_cosu =
      _mpfr_cosuPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_tanu(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_tanu(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_tanuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_tanu');
  late final _mpfr_tanu =
      _mpfr_tanuPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_acosu(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_acosu(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_acosuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_acosu');
  late final _mpfr_acosu = _mpfr_acosuPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_asinu(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_asinu(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_asinuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_asinu');
  late final _mpfr_asinu = _mpfr_asinuPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_atanu(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_atanu(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_atanuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_atanu');
  late final _mpfr_atanu = _mpfr_atanuPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_atan2u(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    int arg3,
    mpfr_rnd_t arg4,
  ) {
    return _mpfr_atan2u(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4.value,
    );
  }

  late final _mpfr_atan2uPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_atan2u');
  late final _mpfr_atan2u = _mpfr_atan2uPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int, int)>();

  int mpfr_acospi(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_acospi(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_acospiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_acospi');
  late final _mpfr_acospi =
      _mpfr_acospiPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_asinpi(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_asinpi(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_asinpiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_asinpi');
  late final _mpfr_asinpi =
      _mpfr_asinpiPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_atanpi(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_atanpi(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_atanpiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_atanpi');
  late final _mpfr_atanpi =
      _mpfr_atanpiPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_atan2pi(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_atan2pi(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_atan2piPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_atan2pi');
  late final _mpfr_atan2pi = _mpfr_atan2piPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_sinpi(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_sinpi(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_sinpiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_sinpi');
  late final _mpfr_sinpi =
      _mpfr_sinpiPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_cospi(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_cospi(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_cospiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_cospi');
  late final _mpfr_cospi =
      _mpfr_cospiPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_tanpi(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_tanpi(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_tanpiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_tanpi');
  late final _mpfr_tanpi =
      _mpfr_tanpiPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_hypot(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_hypot(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_hypotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_hypot');
  late final _mpfr_hypot = _mpfr_hypotPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_erf(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_erf(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_erfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_erf');
  late final _mpfr_erf =
      _mpfr_erfPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_erfc(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_erfc(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_erfcPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_erfc');
  late final _mpfr_erfc =
      _mpfr_erfcPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_cbrt(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_cbrt(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_cbrtPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_cbrt');
  late final _mpfr_cbrt =
      _mpfr_cbrtPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_root(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_root(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_rootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_root');
  late final _mpfr_root =
      _mpfr_rootPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_rootn_ui(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_rootn_ui(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_rootn_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_rootn_ui');
  late final _mpfr_rootn_ui = _mpfr_rootn_uiPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_rootn_si(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_rootn_si(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_rootn_siPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, ffi.Long, ffi.Int)>>('mpfr_rootn_si');
  late final _mpfr_rootn_si = _mpfr_rootn_siPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, int, int)>();

  int mpfr_gamma(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_gamma(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_gammaPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_gamma');
  late final _mpfr_gamma =
      _mpfr_gammaPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_gamma_inc(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_gamma_inc(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_gamma_incPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_gamma_inc');
  late final _mpfr_gamma_inc = _mpfr_gamma_incPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_beta(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_beta(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_betaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_beta');
  late final _mpfr_beta = _mpfr_betaPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_lngamma(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_lngamma(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_lngammaPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_lngamma');
  late final _mpfr_lngamma =
      _mpfr_lngammaPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_lgamma(
    mpfr_ptr arg0,
    ffi.Pointer<ffi.Int> arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_lgamma(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_lgammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<ffi.Int>, mpfr_srcptr,
              ffi.Int)>>('mpfr_lgamma');
  late final _mpfr_lgamma = _mpfr_lgammaPtr.asFunction<
      int Function(mpfr_ptr, ffi.Pointer<ffi.Int>, mpfr_srcptr, int)>();

  int mpfr_digamma(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_digamma(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_digammaPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_digamma');
  late final _mpfr_digamma =
      _mpfr_digammaPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_zeta(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_zeta(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_zetaPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_zeta');
  late final _mpfr_zeta =
      _mpfr_zetaPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_zeta_ui(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_zeta_ui(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_zeta_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_zeta_ui');
  late final _mpfr_zeta_ui =
      _mpfr_zeta_uiPtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_fac_ui(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_fac_ui(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_fac_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.UnsignedLong, ffi.Int)>>('mpfr_fac_ui');
  late final _mpfr_fac_ui =
      _mpfr_fac_uiPtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_j0(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_j0(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_j0Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_j0');
  late final _mpfr_j0 =
      _mpfr_j0Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_j1(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_j1(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_j1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_j1');
  late final _mpfr_j1 =
      _mpfr_j1Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_jn(
    mpfr_ptr arg0,
    int arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_jn(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_jnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Long, mpfr_srcptr, ffi.Int)>>('mpfr_jn');
  late final _mpfr_jn =
      _mpfr_jnPtr.asFunction<int Function(mpfr_ptr, int, mpfr_srcptr, int)>();

  int mpfr_y0(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_y0(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_y0Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_y0');
  late final _mpfr_y0 =
      _mpfr_y0Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_y1(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_y1(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_y1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_y1');
  late final _mpfr_y1 =
      _mpfr_y1Ptr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_yn(
    mpfr_ptr arg0,
    int arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_yn(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_ynPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, ffi.Long, mpfr_srcptr, ffi.Int)>>('mpfr_yn');
  late final _mpfr_yn =
      _mpfr_ynPtr.asFunction<int Function(mpfr_ptr, int, mpfr_srcptr, int)>();

  int mpfr_ai(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_ai(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_aiPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mpfr_ptr, mpfr_srcptr, ffi.Int)>>(
      'mpfr_ai');
  late final _mpfr_ai =
      _mpfr_aiPtr.asFunction<int Function(mpfr_ptr, mpfr_srcptr, int)>();

  int mpfr_min(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_min(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_min');
  late final _mpfr_min = _mpfr_minPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_max(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_max(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_max');
  late final _mpfr_max = _mpfr_maxPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_dim(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_dim(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_dimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_dim');
  late final _mpfr_dim = _mpfr_dimPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_mul_z(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpz_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_mul_z(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_mul_zPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpz_srcptr, ffi.Int)>>('mpfr_mul_z');
  late final _mpfr_mul_z = _mpfr_mul_zPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpz_srcptr, int)>();

  int mpfr_div_z(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpz_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_div_z(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_div_zPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpz_srcptr, ffi.Int)>>('mpfr_div_z');
  late final _mpfr_div_z = _mpfr_div_zPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpz_srcptr, int)>();

  int mpfr_add_z(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpz_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_add_z(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_add_zPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpz_srcptr, ffi.Int)>>('mpfr_add_z');
  late final _mpfr_add_z = _mpfr_add_zPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpz_srcptr, int)>();

  int mpfr_sub_z(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpz_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sub_z(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sub_zPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpfr_srcptr, mpz_srcptr, ffi.Int)>>('mpfr_sub_z');
  late final _mpfr_sub_z = _mpfr_sub_zPtr
      .asFunction<int Function(mpfr_ptr, mpfr_srcptr, mpz_srcptr, int)>();

  int mpfr_z_sub(
    mpfr_ptr arg0,
    mpz_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_z_sub(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_z_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr, mpz_srcptr, mpfr_srcptr, ffi.Int)>>('mpfr_z_sub');
  late final _mpfr_z_sub = _mpfr_z_subPtr
      .asFunction<int Function(mpfr_ptr, mpz_srcptr, mpfr_srcptr, int)>();

  int mpfr_cmp_z(
    mpfr_srcptr arg0,
    mpz_srcptr arg1,
  ) {
    return _mpfr_cmp_z(
      arg0,
      arg1,
    );
  }

  late final _mpfr_cmp_zPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpz_srcptr)>>(
          'mpfr_cmp_z');
  late final _mpfr_cmp_z =
      _mpfr_cmp_zPtr.asFunction<int Function(mpfr_srcptr, mpz_srcptr)>();

  int mpfr_fma(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_srcptr arg3,
    mpfr_rnd_t arg4,
  ) {
    return _mpfr_fma(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4.value,
    );
  }

  late final _mpfr_fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
              ffi.Int)>>('mpfr_fma');
  late final _mpfr_fma = _mpfr_fmaPtr.asFunction<
      int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_fms(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_srcptr arg3,
    mpfr_rnd_t arg4,
  ) {
    return _mpfr_fms(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4.value,
    );
  }

  late final _mpfr_fmsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
              ffi.Int)>>('mpfr_fms');
  late final _mpfr_fms = _mpfr_fmsPtr.asFunction<
      int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_fmma(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_srcptr arg3,
    mpfr_srcptr arg4,
    mpfr_rnd_t arg5,
  ) {
    return _mpfr_fmma(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5.value,
    );
  }

  late final _mpfr_fmmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
              mpfr_srcptr, ffi.Int)>>('mpfr_fmma');
  late final _mpfr_fmma = _mpfr_fmmaPtr.asFunction<
      int Function(
          mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_fmms(
    mpfr_ptr arg0,
    mpfr_srcptr arg1,
    mpfr_srcptr arg2,
    mpfr_srcptr arg3,
    mpfr_srcptr arg4,
    mpfr_rnd_t arg5,
  ) {
    return _mpfr_fmms(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5.value,
    );
  }

  late final _mpfr_fmmsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
              mpfr_srcptr, ffi.Int)>>('mpfr_fmms');
  late final _mpfr_fmms = _mpfr_fmmsPtr.asFunction<
      int Function(
          mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, int)>();

  int mpfr_sum(
    mpfr_ptr arg0,
    ffi.Pointer<mpfr_ptr> arg1,
    int arg2,
    mpfr_rnd_t arg3,
  ) {
    return _mpfr_sum(
      arg0,
      arg1,
      arg2,
      arg3.value,
    );
  }

  late final _mpfr_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<mpfr_ptr>, ffi.UnsignedLong,
              ffi.Int)>>('mpfr_sum');
  late final _mpfr_sum = _mpfr_sumPtr
      .asFunction<int Function(mpfr_ptr, ffi.Pointer<mpfr_ptr>, int, int)>();

  int mpfr_dot(
    mpfr_ptr arg0,
    ffi.Pointer<mpfr_ptr> arg1,
    ffi.Pointer<mpfr_ptr> arg2,
    int arg3,
    mpfr_rnd_t arg4,
  ) {
    return _mpfr_dot(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4.value,
    );
  }

  late final _mpfr_dotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(mpfr_ptr, ffi.Pointer<mpfr_ptr>,
              ffi.Pointer<mpfr_ptr>, ffi.UnsignedLong, ffi.Int)>>('mpfr_dot');
  late final _mpfr_dot = _mpfr_dotPtr.asFunction<
      int Function(
          mpfr_ptr, ffi.Pointer<mpfr_ptr>, ffi.Pointer<mpfr_ptr>, int, int)>();

  void mpfr_free_cache() {
    return _mpfr_free_cache();
  }

  late final _mpfr_free_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_free_cache');
  late final _mpfr_free_cache =
      _mpfr_free_cachePtr.asFunction<void Function()>();

  void mpfr_free_cache2(
    mpfr_free_cache_t arg0,
  ) {
    return _mpfr_free_cache2(
      arg0.value,
    );
  }

  late final _mpfr_free_cache2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'mpfr_free_cache2');
  late final _mpfr_free_cache2 =
      _mpfr_free_cache2Ptr.asFunction<void Function(int)>();

  void mpfr_free_pool() {
    return _mpfr_free_pool();
  }

  late final _mpfr_free_poolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('mpfr_free_pool');
  late final _mpfr_free_pool = _mpfr_free_poolPtr.asFunction<void Function()>();

  int mpfr_mp_memory_cleanup() {
    return _mpfr_mp_memory_cleanup();
  }

  late final _mpfr_mp_memory_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('mpfr_mp_memory_cleanup');
  late final _mpfr_mp_memory_cleanup =
      _mpfr_mp_memory_cleanupPtr.asFunction<int Function()>();

  int mpfr_subnormalize(
    mpfr_ptr arg0,
    int arg1,
    mpfr_rnd_t arg2,
  ) {
    return _mpfr_subnormalize(
      arg0,
      arg1,
      arg2.value,
    );
  }

  late final _mpfr_subnormalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Int, ffi.Int)>>(
          'mpfr_subnormalize');
  late final _mpfr_subnormalize =
      _mpfr_subnormalizePtr.asFunction<int Function(mpfr_ptr, int, int)>();

  int mpfr_strtofr(
    mpfr_ptr arg0,
    ffi.Pointer<ffi.Utf8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Utf8>> arg2,
    int arg3,
    mpfr_rnd_t arg4,
  ) {
    return _mpfr_strtofr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4.value,
    );
  }

  late final _mpfr_strtofrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              mpfr_ptr,
              ffi.Pointer<ffi.Utf8>,
              ffi.Pointer<ffi.Pointer<ffi.Utf8>>,
              ffi.Int,
              ffi.Int)>>('mpfr_strtofr');
  late final _mpfr_strtofr = _mpfr_strtofrPtr.asFunction<
      int Function(mpfr_ptr, ffi.Pointer<ffi.Utf8>,
          ffi.Pointer<ffi.Pointer<ffi.Utf8>>, int, int)>();

  void mpfr_round_nearest_away_begin(
    mpfr_ptr arg0,
  ) {
    return _mpfr_round_nearest_away_begin(
      arg0,
    );
  }

  late final _mpfr_round_nearest_away_beginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(mpfr_ptr)>>(
          'mpfr_round_nearest_away_begin');
  late final _mpfr_round_nearest_away_begin =
      _mpfr_round_nearest_away_beginPtr.asFunction<void Function(mpfr_ptr)>();

  int mpfr_round_nearest_away_end(
    mpfr_ptr arg0,
    int arg1,
  ) {
    return _mpfr_round_nearest_away_end(
      arg0,
      arg1,
    );
  }

  late final _mpfr_round_nearest_away_endPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_ptr, ffi.Int)>>(
          'mpfr_round_nearest_away_end');
  late final _mpfr_round_nearest_away_end =
      _mpfr_round_nearest_away_endPtr.asFunction<int Function(mpfr_ptr, int)>();

  int mpfr_custom_get_size(
    int arg0,
  ) {
    return _mpfr_custom_get_size(
      arg0,
    );
  }

  late final _mpfr_custom_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(mpfr_prec_t)>>(
          'mpfr_custom_get_size');
  late final _mpfr_custom_get_size =
      _mpfr_custom_get_sizePtr.asFunction<int Function(int)>();

  void mpfr_custom_init(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _mpfr_custom_init(
      arg0,
      arg1,
    );
  }

  late final _mpfr_custom_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, mpfr_prec_t)>>('mpfr_custom_init');
  late final _mpfr_custom_init = _mpfr_custom_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> mpfr_custom_get_significand(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_custom_get_significand(
      arg0,
    );
  }

  late final _mpfr_custom_get_significandPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(mpfr_srcptr)>>(
          'mpfr_custom_get_significand');
  late final _mpfr_custom_get_significand = _mpfr_custom_get_significandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(mpfr_srcptr)>();

  int mpfr_custom_get_exp(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_custom_get_exp(
      arg0,
    );
  }

  late final _mpfr_custom_get_expPtr =
      _lookup<ffi.NativeFunction<mpfr_exp_t Function(mpfr_srcptr)>>(
          'mpfr_custom_get_exp');
  late final _mpfr_custom_get_exp =
      _mpfr_custom_get_expPtr.asFunction<int Function(mpfr_srcptr)>();

  void mpfr_custom_move(
    mpfr_ptr arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _mpfr_custom_move(
      arg0,
      arg1,
    );
  }

  late final _mpfr_custom_movePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(mpfr_ptr, ffi.Pointer<ffi.Void>)>>(
      'mpfr_custom_move');
  late final _mpfr_custom_move = _mpfr_custom_movePtr
      .asFunction<void Function(mpfr_ptr, ffi.Pointer<ffi.Void>)>();

  void mpfr_custom_init_set(
    mpfr_ptr arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
  ) {
    return _mpfr_custom_init_set(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mpfr_custom_init_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(mpfr_ptr, ffi.Int, mpfr_exp_t, mpfr_prec_t,
              ffi.Pointer<ffi.Void>)>>('mpfr_custom_init_set');
  late final _mpfr_custom_init_set = _mpfr_custom_init_setPtr.asFunction<
      void Function(mpfr_ptr, int, int, int, ffi.Pointer<ffi.Void>)>();

  int mpfr_custom_get_kind(
    mpfr_srcptr arg0,
  ) {
    return _mpfr_custom_get_kind(
      arg0,
    );
  }

  late final _mpfr_custom_get_kindPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr)>>(
          'mpfr_custom_get_kind');
  late final _mpfr_custom_get_kind =
      _mpfr_custom_get_kindPtr.asFunction<int Function(mpfr_srcptr)>();

  int mpfr_total_order_p(
    mpfr_srcptr arg0,
    mpfr_srcptr arg1,
  ) {
    return _mpfr_total_order_p(
      arg0,
      arg1,
    );
  }

  late final _mpfr_total_order_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(mpfr_srcptr, mpfr_srcptr)>>(
          'mpfr_total_order_p');
  late final _mpfr_total_order_p = _mpfr_total_order_pPtr
      .asFunction<int Function(mpfr_srcptr, mpfr_srcptr)>();
}

final class max_align_t extends ffi.Opaque {}

final class __mpz_struct extends ffi.Struct {
  @ffi.Int()
  external int _mp_alloc;

  @ffi.Int()
  external int _mp_size;

  external ffi.Pointer<mp_limb_t> _mp_d;
}

typedef mp_limb_t = ffi.UnsignedLong;
typedef Dartmp_limb_t = int;

final class __mpq_struct extends ffi.Struct {
  external __mpz_struct _mp_num;

  external __mpz_struct _mp_den;
}

final class __mpf_struct extends ffi.Struct {
  @ffi.Int()
  external int _mp_prec;

  @ffi.Int()
  external int _mp_size;

  @mp_exp_t()
  external int _mp_exp;

  external ffi.Pointer<mp_limb_t> _mp_d;
}

typedef mp_exp_t = ffi.Long;
typedef Dartmp_exp_t = int;

enum gmp_randalg_t {
  GMP_RAND_ALG_DEFAULT(0);

  static const GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT;

  final int value;
  const gmp_randalg_t(this.value);

  static gmp_randalg_t fromValue(int value) => switch (value) {
        0 => GMP_RAND_ALG_DEFAULT,
        _ => throw ArgumentError("Unknown value for gmp_randalg_t: $value"),
      };

  @override
  String toString() {
    if (this == GMP_RAND_ALG_DEFAULT)
      return "gmp_randalg_t.GMP_RAND_ALG_DEFAULT, gmp_randalg_t.GMP_RAND_ALG_LC";
    return super.toString();
  }
}

final class __gmp_randstate_struct extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<__mpz_struct> _mp_seed;

  @ffi.UnsignedInt()
  external int _mp_algAsInt;

  gmp_randalg_t get _mp_alg => gmp_randalg_t.fromValue(_mp_algAsInt);

  external UnnamedUnion1 _mp_algdata;
}

final class UnnamedUnion1 extends ffi.Union {
  external ffi.Pointer<ffi.Void> _mp_lc;
}

typedef gmp_randstate_ptr = ffi.Pointer<__gmp_randstate_struct>;
typedef mpz_srcptr = ffi.Pointer<__mpz_struct>;
typedef mp_bitcnt_t = ffi.UnsignedLong;
typedef Dartmp_bitcnt_t = int;
typedef gmp_randstate_srcptr = ffi.Pointer<__gmp_randstate_struct>;
typedef mpz_ptr = ffi.Pointer<__mpz_struct>;
typedef mp_size_t = ffi.Long;
typedef Dartmp_size_t = int;
typedef mpf_srcptr = ffi.Pointer<__mpf_struct>;
typedef mpq_srcptr = ffi.Pointer<__mpq_struct>;
typedef mp_srcptr = ffi.Pointer<mp_limb_t>;
typedef mp_ptr = ffi.Pointer<mp_limb_t>;
typedef mpq_ptr = ffi.Pointer<__mpq_struct>;
typedef mpf_ptr = ffi.Pointer<__mpf_struct>;
typedef mp_limb_signed_t = ffi.Long;
typedef Dartmp_limb_signed_t = int;

enum mpfr_rnd_t {
  MPFR_RNDN(0),
  MPFR_RNDZ(1),
  MPFR_RNDU(2),
  MPFR_RNDD(3),
  MPFR_RNDA(4),
  MPFR_RNDF(5),
  MPFR_RNDNA(-1);

  final int value;
  const mpfr_rnd_t(this.value);

  static mpfr_rnd_t fromValue(int value) => switch (value) {
        0 => MPFR_RNDN,
        1 => MPFR_RNDZ,
        2 => MPFR_RNDU,
        3 => MPFR_RNDD,
        4 => MPFR_RNDA,
        5 => MPFR_RNDF,
        -1 => MPFR_RNDNA,
        _ => throw ArgumentError("Unknown value for mpfr_rnd_t: $value"),
      };
}

final class __mpfr_struct extends ffi.Struct {
  @mpfr_prec_t()
  external int _mpfr_prec;

  @mpfr_sign_t()
  external int _mpfr_sign;

  @mpfr_exp_t()
  external int _mpfr_exp;

  external ffi.Pointer<mp_limb_t> _mpfr_d;
}

typedef mpfr_struct = __mpfr_struct;

typedef mpfr_prec_t = ffi.Long;
typedef Dartmpfr_prec_t = int;
typedef mpfr_sign_t = ffi.Int;
typedef Dartmpfr_sign_t = int;
typedef mpfr_exp_t = ffi.Long;
typedef Dartmpfr_exp_t = int;

enum mpfr_kind_t {
  MPFR_NAN_KIND(0),
  MPFR_INF_KIND(1),
  MPFR_ZERO_KIND(2),
  MPFR_REGULAR_KIND(3);

  final int value;
  const mpfr_kind_t(this.value);

  static mpfr_kind_t fromValue(int value) => switch (value) {
        0 => MPFR_NAN_KIND,
        1 => MPFR_INF_KIND,
        2 => MPFR_ZERO_KIND,
        3 => MPFR_REGULAR_KIND,
        _ => throw ArgumentError("Unknown value for mpfr_kind_t: $value"),
      };
}

enum mpfr_free_cache_t {
  MPFR_FREE_LOCAL_CACHE(1),
  MPFR_FREE_GLOBAL_CACHE(2);

  final int value;
  const mpfr_free_cache_t(this.value);

  static mpfr_free_cache_t fromValue(int value) => switch (value) {
        1 => MPFR_FREE_LOCAL_CACHE,
        2 => MPFR_FREE_GLOBAL_CACHE,
        _ => throw ArgumentError("Unknown value for mpfr_free_cache_t: $value"),
      };
}

typedef mpfr_flags_t = ffi.UnsignedInt;
typedef Dartmpfr_flags_t = int;
typedef mpfr_ptr = ffi.Pointer<__mpfr_struct>;
typedef mpfr_srcptr = ffi.Pointer<__mpfr_struct>;

const int GMP_ERROR_NONE = 0;

const int GMP_ERROR_UNSUPPORTED_ARGUMENT = 1;

const int GMP_ERROR_DIVISION_BY_ZERO = 2;

const int GMP_ERROR_SQRT_OF_NEGATIVE = 4;

const int GMP_ERROR_INVALID_ARGUMENT = 8;

const int GMP_ERROR_MPZ_OVERFLOW = 16;

const int MPFR_VERSION_MAJOR = 4;

const int MPFR_VERSION_MINOR = 2;

const int MPFR_VERSION_PATCHLEVEL = 1;

const String MPFR_VERSION_STRING = '4.2.1';

const int MPFR_VERSION = 262657;

const int __GMP_HAVE_HOST_CPU_FAMILY_power = 0;

const int __GMP_HAVE_HOST_CPU_FAMILY_powerpc = 0;

const int GMP_LIMB_BITS = 64;

const int GMP_NAIL_BITS = 0;

const int GMP_NUMB_BITS = 64;

const int GMP_NUMB_MASK = -1;

const int GMP_NUMB_MAX = -1;

const int GMP_NAIL_MASK = 0;

const int __GNU_MP__ = 6;

const int NULL = 0;

const int _LIBC_LIMITS_H_ = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int __GMP_LIBGMP_DLL = 0;

const int __GMP_MP_SIZE_T_INT = 0;

const int __GMP_INLINE_PROTOTYPES = 1;

const String __GMP_CC = 'x86_64-linux-gnu-gcc';

const String __GMP_CFLAGS =
    '-g -O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=BUILDPATH=. -flto=auto -ffat-lto-objects -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -fdebug-prefix-map=BUILDPATH=/usr/src/gmp-2:6.3.0+dfsg-2ubuntu6 -O3';

const int __GNU_MP_VERSION = 6;

const int __GNU_MP_VERSION_MINOR = 3;

const int __GNU_MP_VERSION_PATCHLEVEL = 0;

const int __GNU_MP_RELEASE = 60300;

const int MPFR_FLAGS_UNDERFLOW = 1;

const int MPFR_FLAGS_OVERFLOW = 2;

const int MPFR_FLAGS_NAN = 4;

const int MPFR_FLAGS_INEXACT = 8;

const int MPFR_FLAGS_ERANGE = 16;

const int MPFR_FLAGS_DIVBY0 = 32;

const int MPFR_FLAGS_ALL = 63;

const int GMP_RNDN = 0;

const int GMP_RNDZ = 1;

const int GMP_RNDU = 2;

const int GMP_RNDD = 3;

const int _MPFR_PREC_FORMAT = 3;

const int _MPFR_EXP_FORMAT = 3;

const int MPFR_PREC_MIN = 1;

const int MPFR_PREC_MAX = 9223372036854775551;

const int MPFR_EMAX_DEFAULT = 1073741823;

const int MPFR_EMIN_DEFAULT = -1073741823;

const int __MPFR_EXP_MAX = 9223372036854775807;

const int __MPFR_EXP_NAN = -9223372036854775806;

const int __MPFR_EXP_ZERO = -9223372036854775807;

const int __MPFR_EXP_INF = -9223372036854775805;

const int MPFR_USE_C99_FEATURE = 0;
